##-------------------------------------------
## output files and plots for markdown report
return(list(new_scores=new_scores_pct,
ref_scores=ref.score.quantiles,
knn_dx=nn_dx,
knn_banff=nn_banff,
pca_1_2=pca_new_1_2,
pca_2_3=pca_new_2_3,
aa_cluster_new=pred_aa, #new sample cluster probs
pca_archetype=pca_aa,
#aa_cluster_table=cluster_table,
pathways=pathway_table,
pathway_radar=pathway_radar,
cell_types=cell_type_table,
cell_type_radar=cell_type_radar,
bkv_plot=bkv_boxplot,
bkv_stats=bkv_tab)
)
}
## if no output directory provided, output files to RCC file directory
if (exists('outPath')) {
outPath=outPath
cat("Output path:\n", outPath, "\n")
} else {
outPath=paste0(dirname(newRCC), "/")
cat("Output path:\n", outPath, "\n")
}
## get new sample ID
new.ns.data <- parseRCC(newRCC)
newRCC='../test_files/amr.RCC'
## if no output directory provided, output files to RCC file directory
if (exists('outPath')) {
outPath=outPath
cat("Output path:\n", outPath, "\n")
} else {
outPath=paste0(dirname(newRCC), "/")
cat("Output path:\n", outPath, "\n")
}
## get new sample ID
new.ns.data <- parseRCC(newRCC)
newID <- colnames(new.ns.data$attributes)[2]
## verify BHOT sequencing panel
newRLF <- new.ns.data$attributes[new.ns.data$attributes$variable=="GeneRLF",newID]
if (newRLF != "NS_Hs_Transplant_v1.0") {
stop("The Gene RLF must be the same as the reference set: nCounter Human Organ Transplant Panel (NS_Hs_Transplant_v1.0)")
} else {
cat(">>Generating predictions for sample:", newID, "\n")
}
## create sample directory in outPath
dir.create(paste0(outPath, newID), recursive=TRUE, showWarnings=FALSE)
newOut=paste0(outPath, newID)
## load raw count table, parse newRCC, and merge counts
ns.data <- read.table('../model_data/kidney/tables/refset_counts_raw.txt', sep='\t', header=TRUE, check.names=FALSE)
ns.new <- parseRCC(newRCC)
countTable <- merge(ns.data, ns.new$counts, by=c("CodeClass", "Name", "Accession"), all.x=TRUE)
rownames(countTable) <- countTable$Name
## rename newID if exists in refset sample names: rownames(dx_ref)
samp_ind <- grep(newID, colnames(countTable))
if (length(samp_ind) > 1) {
colnames(countTable)[samp_ind][1]<-newID
colnames(countTable)[samp_ind][2]<-paste0(newID, "-new")
newID<-paste0(newID, "-new")
}
## expression matrix
ns.counts <- as.matrix(countTable[,-c(1:3)])
## feature data
ns.anno <- countTable[,c(1:3)]
rownames(ns.anno) <- ns.anno$Name
## phenotype data
pdat <- data.frame(ID=colnames(ns.counts), check.names=FALSE)
pdat <- merge(pdat, exp_design, by="ID", all.x=TRUE, sort=FALSE)
rownames(pdat) <- pdat$ID
## eset
pdat <- AnnotatedDataFrame(data=pdat,)
fdat <- AnnotatedDataFrame(data=ns.anno)
eset <- newSeqExpressionSet(ns.counts, phenoData=pdat, featureData=fdat)
cat(">>Normalizing raw count data", "\n")
## RUV normalization
ruv_norm <- RUVnorm(eset, k=2, method="RUVg")
ns.norm <- assay(ruv_norm$vsd) ## normalized endogenous counts
## new sample(s) normalized with refSet
new.ns.norm <- data.frame(counts=ns.norm[,newID], check.names=FALSE)
colnames(new.ns.norm) <- newID
##--------------------------
## Diagnostic base models
dx.genes <- colnames(coef(glm.model$finalModel))
dx.genes <- dx.genes[grep("Intercept", dx.genes, invert=TRUE)]
dx.genes <- gsub("`", "", dx.genes)
new.ge <- new.ns.norm
new.ge <- data.frame(t(new.ge), check.names=FALSE)
new.ge <- new.ge[,colnames(new.ge) %in% dx.genes]
## base model prediction
glm.preds <- predict(glm.model, newdata = new.ge, type='prob')
c5.preds <- predict(c5.model, newdata = new.ge, type='prob')
gbm.preds <- predict(gbm.model, newdata = new.ge, type='prob')
knn.preds <- predict(knn.model, newdata = new.ge, type='prob')
lda.preds <- predict(lda.model, newdata = new.ge, type='prob')
rf.preds <- predict(rf.model, newdata = new.ge, type='prob')
svm.preds <- predict(svm.model, newdata = new.ge, type='prob')
xgb.preds <- predict(xgb.model, newdata = new.ge, type='prob')
colnames(glm.preds) <- paste0(colnames(glm.preds), ".glm")
colnames(c5.preds) <- paste0(colnames(c5.preds), ".c5")
colnames(gbm.preds) <- paste0(colnames(gbm.preds), ".gbm")
colnames(knn.preds) <- paste0(colnames(knn.preds), ".knn")
colnames(lda.preds) <- paste0(colnames(lda.preds), ".lda")
colnames(rf.preds) <- paste0(colnames(rf.preds), ".rf")
colnames(svm.preds) <- paste0(colnames(svm.preds), ".svm")
colnames(xgb.preds) <- paste0(colnames(svm.preds), ".xgb")
all.preds <- cbind(glm.preds, c5.preds, gbm.preds, knn.preds, lda.preds, rf.preds, svm.preds, xgb.preds)
all.preds$ID <- rownames(all.preds)
amr.preds <- all.preds[,grep("amr", colnames(all.preds))]
amr.preds[] <- lapply(amr.preds[], as.numeric)
amr_ci <- apply(amr.preds, 1, function(x) { DescTools::MedianCI(x, conf.level=0.95, method="boot") })
amr.preds$median <- amr_ci[1,] #ensemble score
amr.preds$lwr.ci <- amr_ci[2,]
amr.preds$upr.ci <- amr_ci[3,]
amr.preds$lwr.ci[amr.preds$lwr.ci<0]<-0
amr.preds$upr.ci[amr.preds$upr.ci>1]<-1
## TCMR
tcmr.preds <- all.preds[,grep("tcmr", colnames(all.preds))]
tcmr.preds[] <- lapply(tcmr.preds[], as.numeric)
tcmr_ci <- apply(tcmr.preds, 1, function(x) { DescTools::MedianCI(x, conf.level=0.95, method="boot") })
tcmr.preds$median <- tcmr_ci[1,] #ensemble score
tcmr.preds$lwr.ci <- tcmr_ci[2,]
tcmr.preds$upr.ci <- tcmr_ci[3,]
tcmr.preds$lwr.ci[tcmr.preds$lwr.ci<0]<-0
tcmr.preds$upr.ci[tcmr.preds$upr.ci>1]<-1
## normal: no rejection or injury diagnosis
normal.preds <- all.preds[,grep("normal", colnames(all.preds))]
normal.preds[] <- lapply(normal.preds[], as.numeric)
normal_ci <- apply(normal.preds, 1, function(x) { DescTools::MedianCI(x, conf.level=0.95, method="boot") })
normal.preds$median <- normal_ci[1,] #ensemble score
normal.preds$lwr.ci <- normal_ci[2,]
normal.preds$upr.ci <- normal_ci[3,]
normal.preds$lwr.ci[normal.preds$lwr.ci<0]<-0
normal.preds$upr.ci[normal.preds$upr.ci>1]<-1
## other=NRKI: non-rejection kidney injury
other.preds <- all.preds[,grep("other", colnames(all.preds))]
other.preds[] <- lapply(other.preds[], as.numeric)
other_ci <- apply(other.preds, 1, function(x) { DescTools::MedianCI(x, conf.level=0.95, method="boot") })
other.preds$median <- other_ci[1,] #ensemble score
other.preds$lwr.ci <- other_ci[2,]
other.preds$upr.ci <- other_ci[3,]
other.preds$lwr.ci[other.preds$lwr.ci<0]<-0
other.preds$upr.ci[other.preds$upr.ci>1]<-1
## ensemble predictions + confidence intervals
ensemble.preds <- data.frame(ID=rownames(amr.preds),
amr=amr.preds$median, amr_lwr_ci=amr.preds$lwr.ci, amr_upr_ci=amr.preds$upr.ci,
tcmr=tcmr.preds$median, tcmr_lwr_ci=tcmr.preds$lwr.ci, tcmr_upr_ci=tcmr.preds$upr.ci,
normal=normal.preds$median, normal_lwr_ci=normal.preds$lwr.ci, normal_upr_ci=normal.preds$upr.ci,
other=other.preds$median, other_lwr_ci=other.preds$lwr.ci, other_upr_ci=other.preds$upr.ci)
rownames(ensemble.preds) <- ensemble.preds$ID
new.dx.pred <- ensemble.preds
g.genes <- names(g_score.model$coefficients)[-c(1:3)]
g.genes <- gsub("`", '', g.genes)
new.ge <- new.ns.norm
new.ge <- data.frame(t(new.ge), check.names=FALSE)
new.ge <- new.ge[,colnames(new.ge) %in% g.genes]
new.g.pred <- data.frame(g=stats::predict(g_score.model, newdata=new.ge, type="prob"))
colnames(new.g.pred) <- gsub(".fit.", "", colnames(new.g.pred))
new.g.pred$ID <- newID
## ptc score
ptc.genes <- names(ptc_score.model$coefficients)[-c(1:3)]
ptc.genes <- gsub("`", '', ptc.genes)
new.ge <- new.ns.norm
new.ge <- data.frame(t(new.ge), check.names=FALSE)
new.ge <- new.ge[,colnames(new.ge) %in% ptc.genes]
new.ptc.pred <- data.frame(ptc=stats::predict(ptc_score.model, newdata=new.ge, type="prob"))
colnames(new.ptc.pred) <- gsub(".fit.", "", colnames(new.ptc.pred))
new.ptc.pred$ID <- newID
## i score
i.genes <- names(i_score.model$coefficients)[-c(1:3)]
i.genes <- gsub("`", '', i.genes)
new.ge <- new.ns.norm
new.ge <- data.frame(t(new.ge), check.names=FALSE)
new.ge <- new.ge[,colnames(new.ge) %in% i.genes]
new.i.pred <- data.frame(i=stats::predict(i_score.model, newdata=new.ge, type="prob"))
colnames(new.i.pred) <- gsub(".fit.", "", colnames(new.i.pred))
new.i.pred$ID <- newID
## t score
t.genes <- names(t_score.model$coefficients)[-c(1:3)]
t.genes <- gsub("`", '', t.genes)
new.ge <- new.ns.norm
new.ge <- data.frame(t(new.ge), check.names=FALSE)
new.ge <- new.ge[,colnames(new.ge) %in% t.genes]
new.t.pred <- data.frame(t=stats::predict(t_score.model, newdata=new.ge, type="prob"))
colnames(new.t.pred) <- gsub(".fit.", "", colnames(new.t.pred))
new.t.pred$ID <- newID
##--------------------------
## modify gene names for chronic lesion models
new.ge <- new.ns.norm
rownames(new.ge) <- gsub("-", ".", rownames(new.ge))
rownames(new.ge) <- gsub("/", ".", rownames(new.ge))
rownames(new.ge) <- gsub(" ", ".", rownames(new.ge))
##--------------------------
## predict prob ci>1 for new sample(s)
ci1.genes <- names(ci1_score.model$coefficients)[-1] #LR
new.ci <- t(new.ge)
new.ci <- new.ci[,colnames(new.ci) %in% ci1.genes]
new.pred <- stats::predict(ci1_score.model, newdata=data.frame(t(new.ci)), type="response") #LR
new.pred <- data.frame(new.pred)
new.pred$ID <- newID
new.pred$low <- NULL
new.ci1.pred <- new.pred
colnames(new.ci1.pred) <- c("ci1_binary", "ID")
##--------------------------
## predict prob ct>1 for new sample(s)
ct1.genes <- names(ct1_score.model$coefficients)[-1] #LR
new.ct <- t(new.ge)
new.ct <- new.ct[,colnames(new.ct) %in% ct1.genes]
new.pred <- stats::predict(ct1_score.model, newdata=data.frame(t(new.ct)), type="response") #LR
new.pred <- data.frame(new.pred)
new.pred$ID <- newID
new.pred$low <- NULL
new.ct1.pred <- new.pred
colnames(new.ct1.pred) <- c("ct1_binary", "ID")
##--------------------------
## predict prob cv>1 for new sample(s)
cv1.genes <- names(cv1_score.model$coefficients)[-1] #LR
new.cv <- t(new.ge)
new.cv <- new.cv[,colnames(new.cv) %in% cv1.genes]
new.pred <- stats::predict(cv1_score.model, newdata=data.frame(t(new.cv)), type="response") #LR
new.pred <- data.frame(new.pred)
new.pred$ID <- newID
new.pred$low <- NULL
new.cv1.pred <- new.pred
colnames(new.cv1.pred) <- c("cv1_binary", "ID")
##--------------------------
## predict prob v>0 for new sample(s)
v0.genes <- names(v0_score.model$coefficients)[-1] #LR
new.v <- t(new.ge)
new.v <- new.v[,colnames(new.v) %in% v0.genes]
new.pred <- stats::predict(v0_score.model, newdata=data.frame(t(new.v)), type="response") #LR
new.pred <- data.frame(new.pred)
new.pred$ID <- newID
new.pred$low <- NULL
new.v0.pred <- new.pred
colnames(new.v0.pred) <- c("v0_binary", "ID")
##--------------------------
## predict prob cg>0 for new samples
cg0.genes <- names(cg0_score.model$coefficients)[-1] #LR
new.cg <- t(new.ge)
new.cg <- new.cg[,colnames(new.cg) %in% cg0.genes]
new.pred <- stats::predict(cg0_score.model, newdata=data.frame(t(new.cg)), type="response") #LR
new.pred <- data.frame(new.pred)
new.pred$ID <- newID
new.pred$low <- NULL
new.cg0.pred <- new.pred
colnames(new.cg0.pred) <- c("cg0_binary", "ID")
##--------------------------
## predict prob i_IFTA>0 for new samples
iifta0.genes <- names(iifta0_score.model$coefficients)[-1] #LR
new.iifta <- t(new.ge)
new.iifta <- new.iifta[,colnames(new.iifta) %in% iifta0.genes]
new.pred <- stats::predict(iifta0_score.model, newdata=data.frame(t(new.iifta)), type="response") #LR
new.pred <- data.frame(new.pred)
new.pred$ID <- newID
new.pred$low <- NULL
new.iifta0.pred <- new.pred
colnames(new.iifta0.pred) <- c("iifta0_binary", "ID")
##-------------------------------------
## score table
options(scipen = 999)
join_list <- list(new.dx.pred,
new.g.pred, new.ptc.pred, new.i.pred, new.t.pred, #ordinal
new.cg0.pred, new.iifta0.pred, new.v0.pred,
new.cv1.pred, new.ci1.pred, new.ct1.pred)
tab <- Reduce(function(...) merge(..., all=TRUE), join_list)
rownames(tab) <- tab$ID
new_scores <- tab ## save scores before calculating %
tab <- data.frame(round(tab[-1], 3) *100)
tab$ID <- rownames(tab)
new_scores_pct <- tab %>% dplyr::select(ID, everything())
## add binary Banff lesion scores
ref.tab <- merge(dx_ref, banff_ref[,c("ID", "iifta0_binary", "v0_binary", "cg0_binary", "ti1_binary", "cv1_binary",
"ci1_binary", "ct1_binary")], by="ID")
rownames(ref.tab) <- ref.tab$ID
dx_scores <- c("amr", "tcmr", "normal", "other", "iifta0_binary", "v0_binary", "cg0_binary", "ti1_binary", "cv1_binary",
"ci1_binary", "ct1_binary")
## IQR = Q3 - Q1
## Q0= min and Q5=max
ref.amr.quantiles <- apply(ref.tab[ref.tab$Dx_simple=="amr",dx_scores], 2, quantile, na.rm=TRUE)
ref.tcmr.quantiles <- apply(ref.tab[ref.tab$Dx_simple=="tcmr",dx_scores], 2, quantile, na.rm=TRUE)
ref.normal.quantiles <- apply(ref.tab[ref.tab$Dx_simple=="normal",dx_scores], 2, quantile, na.rm=TRUE)
ref.other.quantiles <- apply(ref.tab[ref.tab$Dx_simple=="other",dx_scores], 2, quantile, na.rm=TRUE)
ref.amr.quantiles <- data.frame(apply(ref.amr.quantiles, 2, function(x) {round(x, 3)*100}))
ref.amr.quantiles$Dx <- "AMR"
ref.amr.quantiles$Q <- rownames(ref.amr.quantiles)
ref.tcmr.quantiles <- data.frame(apply(ref.tcmr.quantiles, 2, function(x) {round(x, 3)*100}))
ref.tcmr.quantiles$Dx <- "TCMR"
ref.tcmr.quantiles$Q <- rownames(ref.tcmr.quantiles)
ref.normal.quantiles <- data.frame(apply(ref.normal.quantiles, 2, function(x) {round(x, 3)*100}))
ref.normal.quantiles$Dx <- "NONREJECTION"
ref.normal.quantiles$Q <- rownames(ref.normal.quantiles)
ref.other.quantiles <- data.frame(apply(ref.other.quantiles, 2, function(x) {round(x, 3)*100}))
ref.other.quantiles$Dx <- "INJURY"
ref.other.quantiles$Q <- rownames(ref.other.quantiles)
ref.other.quantiles <- data.frame(apply(ref.other.quantiles, 2, function(x) {round(x, 3)*100}))
ref.other.quantiles <- apply(ref.tab[ref.tab$Dx_simple=="other",dx_scores], 2, quantile, na.rm=TRUE)
ref.other.quantiles <- data.frame(apply(ref.other.quantiles, 2, function(x) {round(x, 3)*100}))
ref.other.quantiles$Dx <- "NRKI"
ref.other.quantiles$Q <- rownames(ref.other.quantiles)
ref.score.quantiles <- rbind(ref.amr.quantiles, ref.tcmr.quantiles, ref.normal.quantiles, ref.other.quantiles)
ref.score.quantiles
##----------------------------------------------
## boxplots of reference biopsy molecular scores
dat <- ref.tab[ref.tab$Dx_simple=="amr",]
dat <- dat[,dx_scores]
#amr_order <- names(ref.amr.median[order(ref.amr.median, decreasing=F)])
#dat <- dat[,amr_order]
colnames(dat) <- gsub("_score", "", colnames(dat))
suppressWarnings({
dat.m <- reshape2::melt(dat)
})
dat.m$value <- dat.m$value * 100
boxplot_amr <- ggplot(data=dat.m, aes(x=reorder(variable, value, median, order=TRUE), y=value)) +
ggtitle("AMR reference biopsies") +
ylab("molecular score (%)") + xlab("") + ylim(c(0, 100)) +
geom_hline(yintercept=50, linetype="dashed", color="slategray") +
geom_boxplot(color="steelblue4", fill="whitesmoke") +
theme(legend.title=element_blank(),
panel.grid.minor=element_line(colour="gray"),
panel.grid.major=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="white"),
axis.text.x=element_text(face="bold", size=14, angle=0),
axis.title.x=element_text(face="bold", size=14, angle=0),
axis.text.y=element_text(size=14, angle=0),
axis.title.y=element_text(face="bold", size=14),
panel.border=element_rect(colour="gray", fill=NA, size=1))
##--------------------------
## combine refset and new molecular scores
## scores to input to PCA
pca_scores <- c("amr", "tcmr", "normal")
## keep only Bx with all molecular scores
mscores_pca <- ref.tab[apply(ref.tab[,pca_scores], 1, function(x) { all(!is.na(x)) }),]
## add scores for new sample
mscores_pca <- rbind(mscores_pca[,pca_scores], new_scores[,pca_scores])
resPCA <- FactoMineR::PCA(mscores_pca[,!colnames(mscores_pca) %in% "ID"], scale.unit=FALSE, ncp=5, graph=FALSE)
pca.df <- as.data.frame(resPCA$ind$coord)
pca.df$ID <- rownames(pca.df)
pca.df <- merge(pca.df, ref.tab[,c("ID", "Dx")], by="ID", all.x=TRUE)
pca.df$Dx <- ifelse(pca.df$ID %in% new_scores$ID, "new", pca.df$Dx)
## simplify Dx
pca.df$Dx <- ifelse(pca.df$Dx %in% c(dx_amr, dx_tcmr, dx_normal, "new"), pca.df$Dx, "Injury w/o rejection")
resPCA <- FactoMineR::PCA(mscores_pca[,!colnames(mscores_pca) %in% "ID"], scale.unit=FALSE, ncp=5, graph=FALSE)
pca.df <- as.data.frame(resPCA$ind$coord)
pca.df$ID <- rownames(pca.df)
pca.df <- merge(pca.df, ref.tab[,c("ID", "Dx")], by="ID", all.x=TRUE)
pca.df$Dx <- ifelse(pca.df$ID %in% new_scores$ID, "new", pca.df$Dx)
## simplify Dx
pca.df$Dx <- ifelse(pca.df$Dx %in% c(dx_amr, dx_tcmr, dx_normal, "new"), pca.df$Dx, "NRKI")
## highlight new biopsy
pca.df <- plyr::mutate(pca.df, ref=ifelse(pca.df$Dx!="new", "ref", "new"))
#col_vector=c("firebrick",  "blue3", "mediumpurple", "turquoise", "orangered", "dodgerblue", "salmon",
#	     "olivedrab2","darkgreen", "black", "palegreen", "lightgray")
col_vector=c("firebrick",  "blue3", "salmon", "dodgerblue", "orangered", "lightgray", "black", "gray36")
pca_new_1_2 <- ggplot() +
scale_fill_manual(values=col_vector) +
#geom_point(data=pca.df, aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=4, alpha=0.7) +
geom_point(data=pca.df[pca.df$ref=="ref",], aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=3, alpha=0.8) +
geom_point(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2), shape=23, size=4, alpha=1, fill="orange") +
#geom_text_repel(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2, label=ID), size=2, colour="orange") +
xlab(paste("PC1 ", round(resPCA$eig[1,2]),"% of variance",sep="")) +
ylab(paste("PC2 ", round(resPCA$eig[2,2]),"% of variance",sep="")) +
theme(legend.position="top", legend.title=element_blank(),
panel.grid.minor=element_line(colour="gray"), panel.grid.major=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="white"),
axis.text=element_text(size=12),
axis.text.x=element_text(face="bold", size=12, angle=0),
axis.title.x=element_text(face="bold", size=12, angle=0),
axis.title.y=element_text(face="bold", size=12),
panel.border=element_rect(colour="white", fill=NA, size=5))
pca_new_1_2
#col_vector=c("firebrick",  "blue3", "mediumpurple", "turquoise", "orangered", "dodgerblue", "salmon",
#	     "olivedrab2","darkgreen", "black", "palegreen", "lightgray")
col_vector=c("firebrick",  "blue3", "salmon", "dodgerblue", "orangered", "lightgray", "gray36", "black")
pca_new_1_2 <- ggplot() +
scale_fill_manual(values=col_vector) +
#geom_point(data=pca.df, aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=4, alpha=0.7) +
geom_point(data=pca.df[pca.df$ref=="ref",], aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=3, alpha=0.8) +
geom_point(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2), shape=23, size=4, alpha=1, fill="orange") +
#geom_text_repel(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2, label=ID), size=2, colour="orange") +
xlab(paste("PC1 ", round(resPCA$eig[1,2]),"% of variance",sep="")) +
ylab(paste("PC2 ", round(resPCA$eig[2,2]),"% of variance",sep="")) +
theme(legend.position="top", legend.title=element_blank(),
panel.grid.minor=element_line(colour="gray"), panel.grid.major=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="white"),
axis.text=element_text(size=12),
axis.text.x=element_text(face="bold", size=12, angle=0),
axis.title.x=element_text(face="bold", size=12, angle=0),
axis.title.y=element_text(face="bold", size=12),
panel.border=element_rect(colour="white", fill=NA, size=5))
pca_new_1_2
#col_vector=c("firebrick",  "blue3", "mediumpurple", "turquoise", "orangered", "dodgerblue", "salmon",
#	     "olivedrab2","darkgreen", "black", "palegreen", "lightgray")
col_vector=c("firebrick",  "blue3", "salmon", "dodgerblue", "orangered", "black", "gray36", "lightgray")
pca_new_1_2 <- ggplot() +
scale_fill_manual(values=col_vector) +
#geom_point(data=pca.df, aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=4, alpha=0.7) +
geom_point(data=pca.df[pca.df$ref=="ref",], aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=3, alpha=0.8) +
geom_point(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2), shape=23, size=4, alpha=1, fill="orange") +
#geom_text_repel(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2, label=ID), size=2, colour="orange") +
xlab(paste("PC1 ", round(resPCA$eig[1,2]),"% of variance",sep="")) +
ylab(paste("PC2 ", round(resPCA$eig[2,2]),"% of variance",sep="")) +
theme(legend.position="top", legend.title=element_blank(),
panel.grid.minor=element_line(colour="gray"), panel.grid.major=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="white"),
axis.text=element_text(size=12),
axis.text.x=element_text(face="bold", size=12, angle=0),
axis.title.x=element_text(face="bold", size=12, angle=0),
axis.title.y=element_text(face="bold", size=12),
panel.border=element_rect(colour="white", fill=NA, size=5))
pca_new_1_2
pca.df[pca.df$Dx=="AMR",]
pca.df[pca.df$Dx %in% dx_amr,]
pca.df[pca.df$Dx %in% dx_amr & pca.df$Dim.1<0,]
pca.df[pca.df$Dx %in% dx_amr & pca.df$Dim.1<0 & pca.df$Dim.2>0.4,]
ref.df
newRCC='../test_files/test.RCC'
source('../scripts/BHOTpred.R')
newPath <- normalizePath(dirname(newRCC))
dir.create(paste0(newPath, '/histomx_results/'), recursive=TRUE, showWarnings=FALSE)
outPath=paste0(newPath, '/histomx_results/')
newPreds <- BHOTpred(newRCC, outPath, saveFiles=FALSE)
newID <- newPreds$new_scores$ID
newQC <- rccQC(newRCC, outPath)
ms_new <- data.frame(t(newPreds$new_scores[,c("amr", "tcmr", "normal", "other")]), check.names=FALSE)
ms_new$Diagnosis <- rownames(ms_new)
## confidence intervals
ci_tab <- data.frame(newPreds$new_scores[,grep("_ci", names(newPreds$new_scores))])
ci_new <- data.frame(amr=paste(ci_tab$amr_lwr_ci, "-", ci_tab$amr_upr_ci),
tcmr=paste(ci_tab$tcmr_lwr_ci, "-", ci_tab$tcmr_upr_ci),
normal=paste(ci_tab$normal_lwr_ci, "-", ci_tab$normal_upr_ci),
other=paste(ci_tab$other_lwr_ci, "-", ci_tab$other_upr_ci))
ci_new <- data.frame(CI=t(ci_new))
ci_new$Diagnosis <- rownames(ci_new)
## reference set quantiles
ms_ref <- newPreds$ref_scores[,c("Dx", "amr", "tcmr", "normal", "other", "Q")]
## q1 and q3 (can also add IQR, min, max)
tab <- data.frame(matrix(nrow=dim(ms_new)[1], ncol=2), check.names=FALSE)
colnames(tab) <- c("No rejection Q1", "No rejection Q3")
rownames(tab) <- rownames(ms_new)
head(tab)
tab[rownames(tab)=="amr","No rejection Q1"] <- ms_ref[ms_ref$Dx=="NONREJECTION" & ms_ref$Q=="25%","amr"]
tab[rownames(tab)=="amr","No rejection Q3"] <- ms_ref[ms_ref$Dx=="NONREJECTION" & ms_ref$Q=="75%","amr"]
## reference biopsy TCMR molecular score ranges
tab[rownames(tab)=="tcmr","No rejection Q1"] <- ms_ref[ms_ref$Dx=="NONREJECTION" & ms_ref$Q=="25%","tcmr"]
tab[rownames(tab)=="tcmr","No rejection Q3"] <- ms_ref[ms_ref$Dx=="NONREJECTION" & ms_ref$Q=="75%","tcmr"]
## reference biopsy Nonrejection molecular score ranges
tab[rownames(tab)=="normal","No rejection Q1"] <- ms_ref[ms_ref$Dx=="NONREJECTION" & ms_ref$Q=="25%","normal"]
tab[rownames(tab)=="normal","No rejection Q3"] <- ms_ref[ms_ref$Dx=="NONREJECTION" & ms_ref$Q=="75%","normal"]
## reference biopsy non-rejection related injury molecular score ranges
tab[rownames(tab)=="other","No rejection Q1"] <- ms_ref[ms_ref$Dx=="NONREJECTION" & ms_ref$Q=="25%","other"]
tab[rownames(tab)=="other","No rejection Q3"] <- ms_ref[ms_ref$Dx=="NONREJECTION" & ms_ref$Q=="75%","other"]
tab$'Normal range' <- paste(tab$`No rejection Q1`, "-", tab$`No rejection Q3`)
tab$'Diagnosis' <- rownames(tab)
tab <- merge(tab, ci_new, by="Diagnosis")
dx_tab <- merge(ms_new, tab[,c("Diagnosis", "CI", "Normal range")], by="Diagnosis")
colnames(dx_tab)[colnames(dx_tab)=="CI"]<-paste(newID, "range")
dx_order <- c("amr", "tcmr", "normal", "other")
dx_tab <- dx_tab %>% dplyr::slice(match(dx_order, Diagnosis))
dx_tab <- dx_tab[!dx_tab$Diagnosis %in% "normal",]
dx_tab$Diagnosis[dx_tab$Diagnosis=="amr"]<-"AMR"
dx_tab$Diagnosis[dx_tab$Diagnosis=="tcmr"]<-"TCMR"
dx_tab$Diagnosis[dx_tab$Diagnosis=="other"]<-"NRKI"
dx_tab
ms_new <- data.frame(t(newPreds$new_scores[,c("cg0_binary", "iifta0_binary", "v0_binary", "cv1_binary", "ci1_binary", "ct1_binary")]), check.names=FALSE)
rownames(ms_new) <- gsub("\\_binary", "", rownames(ms_new))
ms_new$lesion <- rownames(ms_new)
## reference set quantiles: newPreds$ref_scores
ms_ref <- newPreds$ref_scores[,c("Dx", "cg0_binary", "iifta0_binary", "v0_binary", "cv1_binary", "ci1_binary", "ct1_binary", "Q")]
colnames(ms_ref) <- gsub("\\_binary", "", colnames(ms_ref))
ms_ref <- ms_ref[ms_ref$Dx != "OTHER",]
## q1 and q3 (can also add IQR, min, max)
tab <- data.frame(matrix(nrow=dim(ms_new)[1], ncol=length(unique(ms_ref$Dx))*2), check.names=FALSE)
colnames(tab) <- c("AMR Q1", "AMR Q3", "TCMR Q1", "TCMR Q3",
"NONREJECTION Q1", "NONREJECTION Q3", "INJURY Q1", "INJURY Q3")
rownames(tab) <- rownames(ms_new)
for(i in 1:nrow(tab)) {
tab[rownames(tab)==rownames(ms_new)[i],"AMR Q1"] <- ms_ref[ms_ref$Dx=="AMR" & ms_ref$Q=="25%",rownames(ms_new)[i]]
tab[rownames(tab)==rownames(ms_new)[i],"AMR Q3"] <- ms_ref[ms_ref$Dx=="AMR" & ms_ref$Q=="75%",rownames(ms_new)[i]]
tab[rownames(tab)==rownames(ms_new)[i],"TCMR Q1"] <- ms_ref[ms_ref$Dx=="TCMR" & ms_ref$Q=="25%",rownames(ms_new)[i]]
tab[rownames(tab)==rownames(ms_new)[i],"TCMR Q3"] <- ms_ref[ms_ref$Dx=="TCMR" & ms_ref$Q=="75%",rownames(ms_new)[i]]
tab[rownames(tab)==rownames(ms_new)[i],"NONREJECTION Q1"] <- ms_ref[ms_ref$Dx=="NONREJECTION" & ms_ref$Q=="25%",rownames(ms_new)[i]]
tab[rownames(tab)==rownames(ms_new)[i],"NONREJECTION Q3"] <- ms_ref[ms_ref$Dx=="NONREJECTION" & ms_ref$Q=="75%",rownames(ms_new)[i]]
tab[rownames(tab)==rownames(ms_new)[i],"NRKI Q1"] <- ms_ref[ms_ref$Dx=="NRKI" & ms_ref$Q=="25%",rownames(ms_new)[i]]
tab[rownames(tab)==rownames(ms_new)[i],"NRKI Q3"] <- ms_ref[ms_ref$Dx=="NRKI" & ms_ref$Q=="75%",rownames(ms_new)[i]]
}
tab
tab <- data.frame(matrix(nrow=dim(ms_new)[1], ncol=length(unique(ms_ref$Dx))*2), check.names=FALSE)
colnames(tab) <- c("AMR Q1", "AMR Q3", "TCMR Q1", "TCMR Q3",
"NONREJECTION Q1", "NONREJECTION Q3", "NRKI Q1", "NRKI Q3")
rownames(tab) <- rownames(ms_new)
## add reference biopsy molecular score ranges
## rows=molecular scores; columns=histo diagnosis
for(i in 1:nrow(tab)) {
tab[rownames(tab)==rownames(ms_new)[i],"AMR Q1"] <- ms_ref[ms_ref$Dx=="AMR" & ms_ref$Q=="25%",rownames(ms_new)[i]]
tab[rownames(tab)==rownames(ms_new)[i],"AMR Q3"] <- ms_ref[ms_ref$Dx=="AMR" & ms_ref$Q=="75%",rownames(ms_new)[i]]
tab[rownames(tab)==rownames(ms_new)[i],"TCMR Q1"] <- ms_ref[ms_ref$Dx=="TCMR" & ms_ref$Q=="25%",rownames(ms_new)[i]]
tab[rownames(tab)==rownames(ms_new)[i],"TCMR Q3"] <- ms_ref[ms_ref$Dx=="TCMR" & ms_ref$Q=="75%",rownames(ms_new)[i]]
tab[rownames(tab)==rownames(ms_new)[i],"NONREJECTION Q1"] <- ms_ref[ms_ref$Dx=="NONREJECTION" & ms_ref$Q=="25%",rownames(ms_new)[i]]
tab[rownames(tab)==rownames(ms_new)[i],"NONREJECTION Q3"] <- ms_ref[ms_ref$Dx=="NONREJECTION" & ms_ref$Q=="75%",rownames(ms_new)[i]]
tab[rownames(tab)==rownames(ms_new)[i],"NRKI Q1"] <- ms_ref[ms_ref$Dx=="NRKI" & ms_ref$Q=="25%",rownames(ms_new)[i]]
tab[rownames(tab)==rownames(ms_new)[i],"NRKI Q3"] <- ms_ref[ms_ref$Dx=="NRKI" & ms_ref$Q=="75%",rownames(ms_new)[i]]
}
tab$'Normal range' <- paste(tab$`NONREJECTION Q1`, "-", tab$`NONREJECTION Q3`)
tab$'lesion' <- rownames(tab)
tab
