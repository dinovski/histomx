##-----------------------------------------------------
## import BHOT gene annotations
##-----------------------------------------------------
bhot_annot <- read.csv('../static/BHOT_annotations_v1.csv', check.names=FALSE, header=TRUE)
## exclude control genes (n=12)
rm_genes <- bhot_annot[bhot_annot$`Internal Reference Gene`=="+","Gene"]
bhot_annot <- bhot_annot[!bhot_annot$Gene %in% rm_genes,]
endats <- read.table('../static/ENDAT_genes.txt', check.names=FALSE, header=FALSE)
endats <- endats[endats$V1 %in% bhot_annot$Gene,]
bhot_cell_types <- c("B-cells", "Macrophages", "T-cells", "NK cells")
#  "MAPK", "TNF Family Signaling", added to "Type I Interferon Signaling"
bhot_pathways <- c("B-cell Receptor Signaling", "Chemokine Signaling", "Complement System", "mTOR", "NF-kappaB Signaling",
"Th1 Differentiation", "Th17 Differentiation", "Th2 Differentiation", "Treg Differentiation",
"Type I Interferon Signaling", "Type II Interferon Signaling", "IL6 Signaling",
"Cytotoxicity", "T-cell Receptor Signaling", "Toll-like Receptor Signaling") #important for TCMR (NK et CD8-granzyme activation, T cell activation, allorecognition/innate immunity)
bhot_annot <- bhot_annot[,colnames(bhot_annot) %in% c("Gene", "Cell Type", bhot_pathways)]
## table of total genes per category (for enrichment analysis)
bhot_pathway_totals <- data.frame(Pathway=apply(bhot_annot[,bhot_pathways], 2, function(x) {sum(x=="+")} ))
colnames(bhot_pathway_totals) <- c("Total")
bhot_pathway_totals$Pathway <- rownames(bhot_pathway_totals)
bhot_cell_type_totals <- data.frame(table(bhot_annot[bhot_annot$`Cell Type` %in% bhot_cell_types,"Cell Type"]))
colnames(bhot_cell_type_totals) <- c("CellType", "Total")
bhot_cell_type_totals <- rbind(bhot_cell_type_totals,
data.frame(CellType="Endothelial", Total=length(endats), check.names=F))
newRCC='~/Dropbox/PTG/transcriptomics/nanostring/kidney/refset/current/RefSet-KTD1-FFPE-locked/20200618_IIFTA-run-6_IF-62_07.RCC'
norm_method="separate"
output_id="sample_id"
outPath='~/Downloads/'
cat(">>Generating HistoMx report...\n")
cat("
O---o
O-o
O
o-O
o---O  H i s t o M x
O---o
O-o
O
o-O
o---O\n")
cat("------------------------------\n")
## if no output directory provided, output files to RCC file directory
if (exists('out_path')) {
out_path=out_path
cat("Output path:\n", out_path, "\n")
} else {
out_path=paste0(dirname(newRCC), "/")
cat("Output path:\n", out_path, "\n")
}
## import and parse new sample
ns.new <- parseRCC(newRCC)
if (output_id=="sample_id") {
newID <- colnames(ns.new$attributes)[2]
} else if (output_id=="file_name") {
newID <- gsub("\\.RCC", "", ns.new$attributes[ns.new$attributes$variable=="FileName",2])
} else {
newID <- output_id
}
## remove spaces and special characters from sample ID
newID <- gsub(" ", "_", newID)
newID <- gsub("[<>(),;!@#$%?&/+]", "", newID)
## load raw refset counts, parse newRCC, and merge counts
ns.raw <- read.table('../model_data/kidney/tables/refset_counts_raw.txt', sep='\t', header=TRUE, check.names=FALSE)
endo_genes <- ns.raw[ns.raw$CodeClass=="Endogenous","Name"]
hk_genes <- ns.raw[ns.raw$CodeClass=="Housekeeping","Name"]
pos_genes <- ns.raw[ns.raw$CodeClass=="Positive","Name"]
neg_genes <- ns.raw[ns.raw$CodeClass=="Negative","Name"]
## import normalized refset counts
ns.norm <- read.table('../model_data/kidney/tables/refset_counts_norm.txt', sep='\t', header=TRUE, check.names=FALSE)
rownames(ns.norm) <- ns.norm$ID
ns.norm$ID <- NULL
ns.norm <- data.frame(t(ns.norm), check.names=F)
## check for conflicting sample ID with reference data
if (newID %in% colnames(ns.raw[,-c(1:3)])) {
newID <- paste0(newID, ".x")
} else {
newID = newID
}
## assign ID to counts and attributes files
new_counts <- ns.new$counts
colnames(new_counts)[4] <- newID
new_attributes <- ns.new$attributes
colnames(new_attributes)[2] <- newID
## verify BHOT sequencing panel
newRLF <- new_attributes[new_attributes$variable=="GeneRLF",newID]
if (newRLF != "NS_Hs_Transplant_v1.0") {
cat(">>The input RLF (", newRLF, ") does not match the expected RLF ( NS_Hs_Transplant_v1.0 )\n")
cat(">>Checking for B-HOT panel genes...\n")
if (all(c(endo_genes, hk_genes) %in% new_counts[new_counts$CodeClass %in% c("Endogenous", "Housekeeping"),"Name"])) {
cat(">>...All endogenous and housekeeping genes are present. Only B-HOT panel genes will be used.\n")
new_counts <- new_counts[new_counts$Name %in% c(endo_genes, hk_genes, pos_genes, neg_genes),]
cat(">>Generating predictions for sample:", newID, "\n")
} else {
stop(">>The Gene RLF does not match the reference RLF: nCounter Human Organ Transplant Panel (NS_Hs_Transplant_v1.0)")
}
} else {
cat(">>Generating predictions for sample:", newID, "\n")
}
## create sample directory in out_path
dir.create(paste0(out_path, newID), recursive=TRUE, showWarnings=FALSE)
newOut=paste0(out_path, newID)
##---------------
## Quality control assessment
newQC <- rccQC(newRCC, outPath=out_path)
qc_tab <- newQC$qc_table
qc_tab$variable <- rownames(qc_tab)
pos_e = as.numeric(qc_tab[qc_tab$variable=='POS_E counts',1])
lod = as.numeric(qc_tab[qc_tab$variable=='LoD',1])
## flag if POS_E not > LoD
if (!pos_e > lod) {
cat(">>Sample failed limit of detection QC: interpret with caution")
}
## Abort report generation if any HK gene(s) below LoD or geoMean of NCG
ncGeoMean = as.numeric(qc_tab[qc_tab$variable=='geo mean NEG genes',1])
ncgMean = mean(new_counts[new_counts$CodeClass=="Housekeeping",4])
ncgSD = sd(new_counts[new_counts$CodeClass=="Housekeeping",4])
lod = ncgMean + 2*ncgSD
hk_exp <- new_counts[new_counts$Name %in% hk_genes,4]
## Abort report generation if any HK gene(s) below LoD or geoMean of NCG
ncGeoMean = as.numeric(qc_tab[qc_tab$variable=='geo mean NEG genes',1])
ncgMean = mean(new_counts[new_counts$CodeClass=="Housekeeping",4])
ncgSD = sd(new_counts[new_counts$CodeClass=="Housekeeping",4])
lod = ncgMean + 2*ncgSD
hk_exp <- new_counts[new_counts$Name %in% hk_genes,4]
#hk_exp <- new_counts[new_counts$CodeClass=="Housekeeping",4] #all HK genes
if (any(hk_exp < ncGeoMean)) {
cat(">>Jousekeeping gene(s) with expression below negative control probes detected. Results are not reliable.")
}
lod
ncGeoMean
as.numeric(qc_tab[qc_tab$variable=='geo mean NEG genes',1])
qc_tab
## Abort report generation if any HK gene(s) below LoD or geoMean of NCG
ncGeoMean = as.numeric(qc_tab[qc_tab$variable=='geoMean NEG genes',1])
ncGeoMean
lod
## Abort report generation if any HK gene(s) below LoD or geoMean of NCG
ncGeoMean = as.numeric(qc_tab[qc_tab$variable=='geoMean NEG genes',1])
ncgMean = mean(new_counts[new_counts$CodeClass=="Negative",4])
ncgSD = sd(new_counts[new_counts$CodeClass=="Negative",4])
lod = ncgMean + 2*ncgSD
hk_exp <- new_counts[new_counts$Name %in% hk_genes,4]
lod
ncGeoMean
## Check if any HK gene(s) below LoD or geoMean of NCG
ncGeoMean = as.numeric(qc_tab[qc_tab$variable=='geoMean NEG genes',1])
ncgMean = mean(new_counts[new_counts$CodeClass=="Negative",4])
ncgSD = sd(new_counts[new_counts$CodeClass=="Negative",4])
lod = ncgMean + 2*ncgSD
hk_exp <- new_counts[new_counts$Name %in% hk_genes,4]
#hk_exp <- new_counts[new_counts$CodeClass=="Housekeeping",4] #all HK genes
if (any(hk_exp < lod)) {
cat(">>Housekeeping gene(s) with expression below limit of detection. Results are not reliable.")
}
##---------------
## Normalization
cat(">>Normalizing raw count data: ", norm_method, "\n")
if (norm_method=="combined") {
## Normalize new sample with refset
countTable <- merge(ns.raw, new_counts, by=c("CodeClass", "Name", "Accession"), all.x=TRUE)
rownames(countTable) <- countTable$Name
## rename newID ID if exists in refset sample names: rownames(dx_ref)
#colnames(countTable)[grep(paste0(newID, ".x|", newID, ".y"), colnames(countTable))]
# samp_ind <- grep(paste0(newID, ".x|", newID, ".y"), colnames(countTable))
# if (length(samp_ind) > 1) {
# 	colnames(countTable)[samp_ind][1]<-newID
# 	colnames(countTable)[samp_ind][2]<-gsub("-", "", newID)
# 	newID <- gsub("-", "", newID)
# }
## expression matrix
ns.counts <- as.matrix(countTable[,-c(1:3)])
## feature data
ns.anno <- countTable[,c(1:3)]
rownames(ns.anno) <- ns.anno$Name
## phenotype data
pdat <- data.frame(ID=colnames(ns.counts), check.names=FALSE)
pdat <- merge(pdat, exp_design, by="ID", all.x=TRUE, sort=FALSE)
rownames(pdat) <- pdat$ID
## eset
pdat <- AnnotatedDataFrame(data=pdat,)
fdat <- AnnotatedDataFrame(data=ns.anno)
eset <- newSeqExpressionSet(ns.counts, phenoData=pdat, featureData=fdat)
##--------------
## RUV normalization with refset
ruv_norm <- RUVnorm(eset, k=2, method="RUVg")
ns.norm <- data.frame(assay(ruv_norm$vsd), check.names=FALSE) ## normalized endogenous counts
new.ns.norm <- data.frame(counts=ns.norm[,newID], check.names=FALSE)
colnames(new.ns.norm) <- newID
rownames(new.ns.norm) <- rownames(ns.norm)
} else if (norm_method=="separate") {
## normalize new sample separately: multiply by HK norm factor
rna.content.new <- geoMean(new_counts[rownames(new_counts) %in% hk_genes,4]);
## calculate arithmetic mean of the geometric means of HK genes for each sample in the derivation cohort
hk_refset <- ns.raw[ns.raw$Name %in% hk_genes,]
rownames(hk_refset) <- hk_refset$Name
rna.content.refset <- apply(hk_refset[,-c(1:3)], MARGIN=2, FUN=geoMean)
#hk.norm.factor <- 100 / rna.content
hk.norm.factor <- mean(rna.content.refset) / rna.content.new
new.ns.norm <- new_counts[rownames(new_counts) %in% endo_genes,4] * hk.norm.factor
new.ns.norm <- log2(new.ns.norm + 1)
new.ns.norm <- data.frame(counts=new.ns.norm, check.names=FALSE)
colnames(new.ns.norm) <- colnames(new_counts)[4]
rownames(new.ns.norm) <- new_counts[new_counts$CodeClass=="Endogenous","Name"]
new.ns.norm$gene <- rownames(new.ns.norm)
new.ns.norm <- new.ns.norm[order(new.ns.norm$gene),]
new.ns.norm$gene <- NULL
## subtract mean of HK genes from each endo gene
# new.ns.norm <- log2(new_counts[rownames(new_counts) %in% endo_genes,4] + 1)
# hkMean <- mean(log2(new_counts[rownames(new_counts) %in% hk_genes,4] + 1))
# hkGeoMean <- log2(geoMean(new_counts[rownames(new_counts) %in% hk_genes,4]) +1)
# new.ns.norm <- new.ns.norm - hkMean
# new.ns.norm <- data.frame(counts=new.ns.norm, check.names=FALSE)
# colnames(new.ns.norm) <- colnames(new_counts)[4]
# rownames(new.ns.norm) <- new_counts[new_counts$CodeClass=="Endogenous","Name"]
## combine refset and new norm counts
#all(rownames(ns.norm)==rownames(new.ns.norm))
ns.norm <- merge(ns.norm, new.ns.norm, by=0)
rownames(ns.norm) <- ns.norm$Row.names
ns.norm$Row.names <- NULL
}
newID
ns.norm$IF-62
heaD(ns.norm)
colnames(ns.norm)
amr.genes <- names(coef(amr.glm.model$finalModel))
amr.genes <- amr.genes[grep("Intercept", amr.genes, invert=TRUE)]
amr.genes <- gsub("`", "", amr.genes)
new.ge <- new.ns.norm
new.ge <- data.frame(t(new.ge), check.names=FALSE)
new.ge <- new.ge[,colnames(new.ge) %in% amr.genes]
## base model predictions
amr.glm.preds <- predict(amr.glm.model, newdata = new.ge, type='prob')
amr.glmnet.preds <- predict(amr.glmnet.model, newdata = new.ge, type='prob')
amr.lda.preds <- predict(amr.lda.model, newdata = new.ge, type='prob')
amr.svmlinear.preds <- predict(amr.svmlinear.model, newdata = new.ge, type='prob')
amr.svmradial.preds <- predict(amr.svmradial.model, newdata = new.ge, type='prob')
colnames(amr.glm.preds) <- paste0(colnames(amr.glm.preds), ".glm")
colnames(amr.glmnet.preds) <- paste0(colnames(amr.glmnet.preds), ".glmnet")
colnames(amr.lda.preds) <- paste0(colnames(amr.lda.preds), ".lda")
colnames(amr.svmlinear.preds) <- paste0(colnames(amr.svmlinear.preds), ".svmlinear")
colnames(amr.svmradial.preds) <- paste0(colnames(amr.svmradial.preds), ".svmradial")
amr.all.preds <- cbind(amr.glm.preds, amr.glmnet.preds, amr.lda.preds, amr.svmlinear.preds, amr.svmradial.preds)
amr.all.preds <- amr.all.preds[,grep("amr", colnames(amr.all.preds))]
##--------------------------
## TCMR base models
tcmr.genes <- names(coef(tcmr.glm.model$finalModel))
tcmr.genes <- tcmr.genes[grep("Intercept", tcmr.genes, invert=TRUE)]
tcmr.genes <- gsub("`", "", tcmr.genes)
new.ge <- new.ns.norm
new.ge <- data.frame(t(new.ge), check.names=FALSE)
new.ge <- new.ge[,colnames(new.ge) %in% tcmr.genes]
## base model predictions
tcmr.glm.preds <- predict(tcmr.glm.model, newdata = new.ge, type='prob')
tcmr.glmnet.preds <- predict(tcmr.glmnet.model, newdata = new.ge, type='prob')
tcmr.lda.preds <- predict(tcmr.lda.model, newdata = new.ge, type='prob')
tcmr.svmlinear.preds <- predict(tcmr.svmlinear.model, newdata = new.ge, type='prob')
tcmr.svmradial.preds <- predict(tcmr.svmradial.model, newdata = new.ge, type='prob')
colnames(tcmr.glm.preds) <- paste0(colnames(tcmr.glm.preds), ".glm")
colnames(tcmr.glmnet.preds) <- paste0(colnames(tcmr.glmnet.preds), ".glmnet")
colnames(tcmr.lda.preds) <- paste0(colnames(tcmr.lda.preds), ".lda")
colnames(tcmr.svmlinear.preds) <- paste0(colnames(tcmr.svmlinear.preds), ".svmlinear")
colnames(tcmr.svmradial.preds) <- paste0(colnames(tcmr.svmradial.preds), ".svmradial")
tcmr.all.preds <- cbind(tcmr.glm.preds, tcmr.glmnet.preds, tcmr.lda.preds, tcmr.svmlinear.preds, tcmr.svmradial.preds)
tcmr.all.preds <- tcmr.all.preds[,grep("tcmr", colnames(tcmr.all.preds))]
##--------------------------
## Non-rejection (normal) base models
normal.genes <- names(coef(normal.glm.model$finalModel))
normal.genes <- normal.genes[grep("Intercept", normal.genes, invert=TRUE)]
normal.genes <- gsub("`", "", normal.genes)
new.ge <- new.ns.norm
new.ge <- data.frame(t(new.ge), check.names=FALSE)
new.ge <- new.ge[,colnames(new.ge) %in% normal.genes]
## base model predictions
normal.glm.preds <- predict(normal.glm.model, newdata = new.ge, type='prob')
normal.glmnet.preds <- predict(normal.glmnet.model, newdata = new.ge, type='prob')
normal.lda.preds <- predict(normal.lda.model, newdata = new.ge, type='prob')
normal.svmlinear.preds <- predict(normal.svmlinear.model, newdata = new.ge, type='prob')
normal.svmradial.preds <- predict(normal.svmradial.model, newdata = new.ge, type='prob')
colnames(normal.glm.preds) <- paste0(colnames(normal.glm.preds), ".glm")
colnames(normal.glmnet.preds) <- paste0(colnames(normal.glmnet.preds), ".glmnet")
colnames(normal.lda.preds) <- paste0(colnames(normal.lda.preds), ".lda")
colnames(normal.svmlinear.preds) <- paste0(colnames(normal.svmlinear.preds), ".svmlinear")
colnames(normal.svmradial.preds) <- paste0(colnames(normal.svmradial.preds), ".svmradial")
normal.all.preds <- cbind(normal.glm.preds, normal.glmnet.preds, normal.lda.preds, normal.svmlinear.preds, normal.svmradial.preds)
normal.all.preds <- normal.all.preds[,grep("normal", colnames(normal.all.preds))]
##-----------
## combine amr, tcmr, normal base predictions
all.preds <- cbind(amr.all.preds, tcmr.all.preds, normal.all.preds)
all.preds$ID <- rownames(all.preds)
amr.preds <- all.preds[,grep("amr", colnames(all.preds))]
amr.preds[] <- lapply(amr.preds[], as.numeric)
amr_ci <- apply(amr.preds, 1, function(x) { DescTools::MedianCI(x, conf.level=0.95, method="boot") })
amr.preds$median <- amr_ci[1,] #ensemble score
amr.preds$lwr.ci <- amr_ci[2,]
amr.preds$upr.ci <- amr_ci[3,]
amr.preds$lwr.ci[amr.preds$lwr.ci<0]<-0
amr.preds$upr.ci[amr.preds$upr.ci>1]<-1
## TCMR
tcmr.preds <- all.preds[,grep("tcmr", colnames(all.preds))]
tcmr.preds[] <- lapply(tcmr.preds[], as.numeric)
tcmr_ci <- apply(tcmr.preds, 1, function(x) { DescTools::MedianCI(x, conf.level=0.95, method="boot") })
tcmr.preds$median <- tcmr_ci[1,] #ensemble score
tcmr.preds$lwr.ci <- tcmr_ci[2,]
tcmr.preds$upr.ci <- tcmr_ci[3,]
tcmr.preds$lwr.ci[tcmr.preds$lwr.ci<0]<-0
tcmr.preds$upr.ci[tcmr.preds$upr.ci>1]<-1
## normal: no rejection or injury diagnosis
normal.preds <- all.preds[,grep("normal", colnames(all.preds))]
normal.preds[] <- lapply(normal.preds[], as.numeric)
normal_ci <- apply(normal.preds, 1, function(x) { DescTools::MedianCI(x, conf.level=0.95, method="boot") })
normal.preds$median <- normal_ci[1,] #ensemble score
normal.preds$lwr.ci <- normal_ci[2,]
normal.preds$upr.ci <- normal_ci[3,]
normal.preds$lwr.ci[normal.preds$lwr.ci<0]<-0
normal.preds$upr.ci[normal.preds$upr.ci>1]<-1
## ensemble predictions + confidence intervals
ensemble.preds <- data.frame(ID=rownames(amr.preds),
amr=amr.preds$median, amr_lwr_ci=amr.preds$lwr.ci, amr_upr_ci=amr.preds$upr.ci,
tcmr=tcmr.preds$median, tcmr_lwr_ci=tcmr.preds$lwr.ci, tcmr_upr_ci=tcmr.preds$upr.ci,
normal=normal.preds$median, normal_lwr_ci=normal.preds$lwr.ci, normal_upr_ci=normal.preds$upr.ci)
rownames(ensemble.preds) <- ensemble.preds$ID
new.dx.pred <- ensemble.preds
##-----------------------
## output IQR and median scores by Dx for reference biopsies
ref.tab <- dx_ref
dx_scores <- c("amr", "tcmr", "normal")
## IQR = Q3 - Q1 (Q0= min and Q5=max)
ref.amr.quantiles <- apply(ref.tab[ref.tab$Dx=="amr",dx_scores], 2, quantile, na.rm=TRUE)
ref.tcmr.quantiles <- apply(ref.tab[ref.tab$Dx=="tcmr",dx_scores], 2, quantile, na.rm=TRUE)
ref.normal.quantiles <- apply(ref.tab[ref.tab$Dx=="normal",dx_scores], 2, quantile, na.rm=TRUE)
ref.amr.quantiles <- data.frame(apply(ref.amr.quantiles, 2, function(x) {round(x, 3)*100}))
ref.amr.quantiles$Dx <- "AMR"
ref.amr.quantiles$Q <- rownames(ref.amr.quantiles)
ref.tcmr.quantiles <- data.frame(apply(ref.tcmr.quantiles, 2, function(x) {round(x, 3)*100}))
ref.tcmr.quantiles$Dx <- "TCMR"
ref.tcmr.quantiles$Q <- rownames(ref.tcmr.quantiles)
ref.normal.quantiles <- data.frame(apply(ref.normal.quantiles, 2, function(x) {round(x, 3)*100}))
ref.normal.quantiles$Dx <- "NONREJECTION"
ref.normal.quantiles$Q <- rownames(ref.normal.quantiles)
ref.score.quantiles <- rbind(ref.amr.quantiles, ref.tcmr.quantiles, ref.normal.quantiles)
##--------------------------
## combine refset and new molecular scores
## scores to input to PCA
pca_scores <- c("amr", "tcmr", "normal")
## keep only Bx with all molecular scores
mscores_pca <- ref.tab[apply(ref.tab[,pca_scores], 1, function(x) { all(!is.na(x)) }),]
## add scores for new sample
mscores_pca <- rbind(mscores_pca[,pca_scores], new_scores[,pca_scores])
resPCA <- FactoMineR::PCA(mscores_pca[,!colnames(mscores_pca) %in% "ID"], scale.unit=FALSE, ncp=5, graph=FALSE)
head(ref.tab)
new_scores
##-------------------------------------
## score table
options(scipen = 999)
join_list <- list(new.dx.pred,
new.g.pred, new.ptc.pred, new.i.pred, new.t.pred, #ordinal
new.cg0.pred, new.iifta0.pred, new.ci1.pred, new.ct1.pred)
options(scipen = 999)
join_list <- list(new.dx.pred)
tab <- Reduce(function(...) merge(..., all=TRUE), join_list)
rownames(tab) <- tab$ID
new_scores <- tab ## save scores before calculating %
tab <- data.frame(round(tab[-1], 3) *100)
tab$ID <- rownames(tab)
new_scores_pct <- tab %>% dplyr::select(ID, everything())
new_scores
##-----------------------
## output IQR and median scores by Dx for reference biopsies
ref.tab <- dx_ref
dx_scores <- c("amr", "tcmr", "normal")
## IQR = Q3 - Q1 (Q0= min and Q5=max)
ref.amr.quantiles <- apply(ref.tab[ref.tab$Dx=="amr",dx_scores], 2, quantile, na.rm=TRUE)
ref.tcmr.quantiles <- apply(ref.tab[ref.tab$Dx=="tcmr",dx_scores], 2, quantile, na.rm=TRUE)
ref.normal.quantiles <- apply(ref.tab[ref.tab$Dx=="normal",dx_scores], 2, quantile, na.rm=TRUE)
##--------------------------
## combine refset and new molecular scores
## scores to input to PCA
pca_scores <- c("amr", "tcmr", "normal")
## keep only Bx with all molecular scores
mscores_pca <- ref.tab[apply(ref.tab[,pca_scores], 1, function(x) { all(!is.na(x)) }),]
## add scores for new sample
mscores_pca <- rbind(mscores_pca[,pca_scores], new_scores[,pca_scores])
resPCA <- FactoMineR::PCA(mscores_pca[,!colnames(mscores_pca) %in% "ID"], scale.unit=FALSE, ncp=5, graph=FALSE)
pca.df <- as.data.frame(resPCA$ind$coord)
pca.df$ID <- rownames(pca.df)
pca.df <- merge(pca.df, ref.tab[,c("ID", "Dx_complete")], by="ID", all.x=TRUE)
pca.df$Dx_complete <- ifelse(pca.df$ID %in% new_scores$ID, "new", pca.df$Dx)
## simplify Dx
pca.df$Dx_complete <- ifelse(pca.df$Dx_complete %in% c(dx_amr, dx_tcmr, dx_normal, "new"), pca.df$Dx, "NRKI")
## highlight new biopsy
pca.df <- plyr::mutate(pca.df, ref=ifelse(pca.df$Dx_complete!="new", "ref", "new"))
#col_vector=c("firebrick",  "blue3", "mediumpurple", "turquoise", "orangered", "dodgerblue", "salmon",
#	     "olivedrab2","darkgreen", "black", "palegreen", "lightgray")
col_vector=c("firebrick",  "blue3", "salmon", "dodgerblue", "orangered", "black", "lightgray", "gray18")
pca_new_1_2 <- ggplot() +
scale_fill_manual(values=col_vector) +
#geom_point(data=pca.df, aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=4, alpha=0.7) +
geom_point(data=pca.df[pca.df$ref=="ref",], aes(Dim.1, Dim.2, fill=Dx_complete), shape=21, color="gray", size=3, alpha=0.8) +
geom_point(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2), shape=23, size=4, alpha=1, fill="orange") +
#geom_text_repel(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2, label=ID), size=2, colour="orange") +
xlab(paste("PC1 ", round(resPCA$eig[1,2]),"% of variance",sep="")) +
ylab(paste("PC2 ", round(resPCA$eig[2,2]),"% of variance",sep="")) +
theme(legend.position="top", legend.title=element_blank(),
panel.grid.minor=element_line(colour="gray"), panel.grid.major=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="white"),
axis.text=element_text(size=12),
axis.text.x=element_text(face="bold", size=12, angle=0),
axis.title.x=element_text(face="bold", size=12, angle=0),
axis.title.y=element_text(face="bold", size=12),
panel.border=element_rect(colour="white", fill=NA, linewidth=5))
pca_new_1_2
pca.df[pca.df$Dim.1>0 & pca.df$Dim.2<0,]
pca.df[pca.df$Dim.1>0 & pca.df$Dim.2<0,]
pca_new_1_2 <- ggplot() +
scale_fill_manual(values=col_vector) +
geom_point(data=pca.df, aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=4, alpha=0.7) +
geom_point(data=pca.df[pca.df$ref=="ref",], aes(Dim.1, Dim.2, fill=Dx_complete), shape=21, color="gray", size=3, alpha=0.8) +
geom_point(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2), shape=23, size=4, alpha=1, fill="orange") +
#geom_text_repel(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2, label=ID), size=2, colour="orange") +
xlab(paste("PC1 ", round(resPCA$eig[1,2]),"% of variance",sep="")) +
ylab(paste("PC2 ", round(resPCA$eig[2,2]),"% of variance",sep="")) +
theme(legend.position="top", legend.title=element_blank(),
panel.grid.minor=element_line(colour="gray"), panel.grid.major=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="white"),
axis.text=element_text(size=12),
axis.text.x=element_text(face="bold", size=12, angle=0),
axis.title.x=element_text(face="bold", size=12, angle=0),
axis.title.y=element_text(face="bold", size=12),
panel.border=element_rect(colour="white", fill=NA, linewidth=5))
pca_new_1_2
pca_new_1_2 <- ggplot() +
scale_fill_manual(values=col_vector) +
#geom_point(data=pca.df, aes(Dim.1, Dim.2, fill=Dx_complete), shape=21, color="gray", size=4, alpha=0.7) +
geom_point(data=pca.df[pca.df$ref=="ref",], aes(Dim.1, Dim.2, fill=Dx_complete), shape=21, color="gray", size=3, alpha=0.8) +
geom_point(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2), shape=23, size=4, alpha=1, fill="orange") +
geom_text_repel(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2, label=ID), size=2, colour="orange") +
xlab(paste("PC1 ", round(resPCA$eig[1,2]),"% of variance",sep="")) +
ylab(paste("PC2 ", round(resPCA$eig[2,2]),"% of variance",sep="")) +
theme(legend.position="top", legend.title=element_blank(),
panel.grid.minor=element_line(colour="gray"), panel.grid.major=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="white"),
axis.text=element_text(size=12),
axis.text.x=element_text(face="bold", size=12, angle=0),
axis.title.x=element_text(face="bold", size=12, angle=0),
axis.title.y=element_text(face="bold", size=12),
panel.border=element_rect(colour="white", fill=NA, linewidth=5))
pca_new_1_2
pca_new_1_2 <- ggplot() +
scale_fill_manual(values=col_vector) +
#geom_point(data=pca.df, aes(Dim.1, Dim.2, fill=Dx_complete), shape=21, color="gray", size=4, alpha=0.7) +
geom_point(data=pca.df[pca.df$ref=="ref",], aes(Dim.1, Dim.2, fill=Dx_complete), shape=21, color="gray", size=3, alpha=0.8) +
geom_point(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2), shape=23, size=4, alpha=1, fill="orange") +
geom_text_repel(data=pca.df, aes(Dim.1, Dim.2, label=ID), size=2, colour="orange") +
xlab(paste("PC1 ", round(resPCA$eig[1,2]),"% of variance",sep="")) +
ylab(paste("PC2 ", round(resPCA$eig[2,2]),"% of variance",sep="")) +
theme(legend.position="top", legend.title=element_blank(),
panel.grid.minor=element_line(colour="gray"), panel.grid.major=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="white"),
axis.text=element_text(size=12),
axis.text.x=element_text(face="bold", size=12, angle=0),
axis.title.x=element_text(face="bold", size=12, angle=0),
axis.title.y=element_text(face="bold", size=12),
panel.border=element_rect(colour="white", fill=NA, linewidth=5))
pca_new_1_2
ref.df
ref.tab
ref.tab[ref.tab$ID=="NS-193",]
pca_scores <- c("amr", "tcmr")
## keep only Bx with all molecular scores
mscores_pca <- ref.tab[apply(ref.tab[,pca_scores], 1, function(x) { all(!is.na(x)) }),]
## add scores for new sample
mscores_pca <- rbind(mscores_pca[,pca_scores], new_scores[,pca_scores])
resPCA <- FactoMineR::PCA(mscores_pca[,!colnames(mscores_pca) %in% "ID"], scale.unit=FALSE, ncp=5, graph=FALSE)
pca.df <- as.data.frame(resPCA$ind$coord)
pca.df$ID <- rownames(pca.df)
pca.df <- merge(pca.df, ref.tab[,c("ID", "Dx_complete")], by="ID", all.x=TRUE)
pca.df$Dx_complete <- ifelse(pca.df$ID %in% new_scores$ID, "new", pca.df$Dx)
## simplify Dx
pca.df$Dx_complete <- ifelse(pca.df$Dx_complete %in% c(dx_amr, dx_tcmr, dx_normal, "new"), pca.df$Dx, "NRKI")
## highlight new biopsy
pca.df <- plyr::mutate(pca.df, ref=ifelse(pca.df$Dx_complete!="new", "ref", "new"))
#col_vector=c("firebrick",  "blue3", "mediumpurple", "turquoise", "orangered", "dodgerblue", "salmon",
#	     "olivedrab2","darkgreen", "black", "palegreen", "lightgray")
col_vector=c("firebrick",  "blue3", "salmon", "dodgerblue", "orangered", "black", "lightgray", "gray18")
pca_new_1_2 <- ggplot() +
scale_fill_manual(values=col_vector) +
#geom_point(data=pca.df, aes(Dim.1, Dim.2, fill=Dx_complete), shape=21, color="gray", size=4, alpha=0.7) +
geom_point(data=pca.df[pca.df$ref=="ref",], aes(Dim.1, Dim.2, fill=Dx_complete), shape=21, color="gray", size=3, alpha=0.8) +
geom_point(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2), shape=23, size=4, alpha=1, fill="orange") +
geom_text_repel(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2, label=ID), size=2, colour="orange") +
xlab(paste("PC1 ", round(resPCA$eig[1,2]),"% of variance",sep="")) +
ylab(paste("PC2 ", round(resPCA$eig[2,2]),"% of variance",sep="")) +
theme(legend.position="top", legend.title=element_blank(),
panel.grid.minor=element_line(colour="gray"), panel.grid.major=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="white"),
axis.text=element_text(size=12),
axis.text.x=element_text(face="bold", size=12, angle=0),
axis.title.x=element_text(face="bold", size=12, angle=0),
axis.title.y=element_text(face="bold", size=12),
panel.border=element_rect(colour="white", fill=NA, linewidth=5))
pca_new_1_2
head(dx_ref)
head(banff_ref)
banff_ref[banff_ref$ID=="NS-193",]
pca.df[pca.df$ID=="NS-193",]
banff_ref[banff_ref$ID=="NS-193",]
dx_ref[dx_ref$ID=="NS-193",]
