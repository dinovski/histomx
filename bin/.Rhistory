rownames(new.ge) <- gsub(" ", ".", rownames(new.ge))
##--------------------------
## predict prob ci>1 for new sample(s)
ci1.genes <- names(ci1_score.model$coefficients)[-1] #LR
new.ci <- t(new.ge)
new.ci <- new.ci[,colnames(new.ci) %in% ci1.genes]
new.pred <- stats::predict(ci1_score.model, newdata=data.frame(t(new.ci)), type="response") #LR
new.pred <- data.frame(new.pred)
new.pred$ID <- newID
new.pred$low <- NULL
new.ci1.pred <- new.pred
colnames(new.ci1.pred) <- c("ci1_binary", "ID")
##--------------------------
## predict prob ct>1 for new sample(s)
ct1.genes <- names(ct1_score.model$coefficients)[-1] #LR
new.ct <- t(new.ge)
new.ct <- new.ct[,colnames(new.ct) %in% ct1.genes]
new.pred <- stats::predict(ct1_score.model, newdata=data.frame(t(new.ct)), type="response") #LR
new.pred <- data.frame(new.pred)
new.pred$ID <- newID
new.pred$low <- NULL
new.ct1.pred <- new.pred
colnames(new.ct1.pred) <- c("ct1_binary", "ID")
##--------------------------
## predict prob cv>1 for new sample(s)
cv1.genes <- names(cv1_score.model$coefficients)[-1] #LR
new.cv <- t(new.ge)
new.cv <- new.cv[,colnames(new.cv) %in% cv1.genes]
new.pred <- stats::predict(cv1_score.model, newdata=data.frame(t(new.cv)), type="response") #LR
new.pred <- data.frame(new.pred)
new.pred$ID <- newID
new.pred$low <- NULL
new.cv1.pred <- new.pred
colnames(new.cv1.pred) <- c("cv1_binary", "ID")
##--------------------------
## predict prob v>0 for new sample(s)
v0.genes <- names(v0_score.model$coefficients)[-1] #LR
new.v <- t(new.ge)
new.v <- new.v[,colnames(new.v) %in% v0.genes]
new.pred <- stats::predict(v0_score.model, newdata=data.frame(t(new.v)), type="response") #LR
new.pred <- data.frame(new.pred)
new.pred$ID <- newID
new.pred$low <- NULL
new.v0.pred <- new.pred
colnames(new.v0.pred) <- c("v0_binary", "ID")
##--------------------------
## predict prob cg>0 for new samples
cg0.genes <- names(cg0_score.model$coefficients)[-1] #LR
new.cg <- t(new.ge)
new.cg <- new.cg[,colnames(new.cg) %in% cg0.genes]
new.pred <- stats::predict(cg0_score.model, newdata=data.frame(t(new.cg)), type="response") #LR
new.pred <- data.frame(new.pred)
new.pred$ID <- newID
new.pred$low <- NULL
new.cg0.pred <- new.pred
colnames(new.cg0.pred) <- c("cg0_binary", "ID")
##--------------------------
## predict prob i_IFTA>0 for new samples
iifta0.genes <- names(iifta0_score.model$coefficients)[-1] #LR
new.iifta <- t(new.ge)
new.iifta <- new.iifta[,colnames(new.iifta) %in% iifta0.genes]
new.pred <- stats::predict(iifta0_score.model, newdata=data.frame(t(new.iifta)), type="response") #LR
new.pred <- data.frame(new.pred)
new.pred$ID <- newID
new.pred$low <- NULL
new.iifta0.pred <- new.pred
colnames(new.iifta0.pred) <- c("iifta0_binary", "ID")
##-------------------------------------
## score table
options(scipen = 999)
join_list <- list(new.dx.pred,
new.g.pred, new.ptc.pred, new.i.pred, new.t.pred, #ordinal
new.cg0.pred, new.iifta0.pred, new.v0.pred,
new.cv1.pred, new.ci1.pred, new.ct1.pred)
tab <- Reduce(function(...) merge(..., all=TRUE), join_list)
rownames(tab) <- tab$ID
new_scores <- tab ## save scores before calculating %
tab <- data.frame(round(tab[-1], 3) *100)
tab$ID <- rownames(tab)
new_scores_pct <- tab %>% dplyr::select(ID, everything())
## output score table
if(saveFiles=="TRUE") {
write.table(new_scores_pct, file=paste0(newOut, "/molecular_score_table_", newID, "_", Sys.Date(), ".txt"), quote=FALSE, sep='\t', row.names=FALSE)
}
options(scipen = 0)
head(ref.tab)
## add binary Banff lesion scores
ref.tab <- merge(dx_ref, banff_ref[,c("ID", "iifta0_binary", "v0_binary", "cg0_binary", "ti1_binary", "cv1_binary",
"ci1_binary", "ct1_binary")], by="ID")
rownames(ref.tab) <- ref.tab$ID
dx_scores <- c("amr", "tcmr", "normal", "other", "iifta0_binary", "v0_binary", "cg0_binary", "ti1_binary", "cv1_binary",
"ci1_binary", "ct1_binary")
## IQR = Q3 - Q1
## Q0= min and Q5=max
ref.amr.quantiles <- apply(ref.tab[ref.tab$Dx_simple=="amr",dx_scores], 2, quantile, na.rm=TRUE)
ref.tcmr.quantiles <- apply(ref.tab[ref.tab$Dx_simple=="tcmr",dx_scores], 2, quantile, na.rm=TRUE)
ref.normal.quantiles <- apply(ref.tab[ref.tab$Dx_simple=="normal",dx_scores], 2, quantile, na.rm=TRUE)
ref.other.quantiles <- apply(ref.tab[ref.tab$Dx_simple=="other",dx_scores], 2, quantile, na.rm=TRUE)
ref.amr.quantiles <- data.frame(apply(ref.amr.quantiles, 2, function(x) {round(x, 3)*100}))
ref.amr.quantiles$Dx <- "AMR"
ref.amr.quantiles$Q <- rownames(ref.amr.quantiles)
ref.tcmr.quantiles <- data.frame(apply(ref.tcmr.quantiles, 2, function(x) {round(x, 3)*100}))
ref.tcmr.quantiles$Dx <- "TCMR"
ref.tcmr.quantiles$Q <- rownames(ref.tcmr.quantiles)
ref.normal.quantiles <- data.frame(apply(ref.normal.quantiles, 2, function(x) {round(x, 3)*100}))
ref.normal.quantiles$Dx <- "NONREJECTION"
ref.normal.quantiles$Q <- rownames(ref.normal.quantiles)
ref.other.quantiles <- data.frame(apply(ref.other.quantiles, 2, function(x) {round(x, 3)*100}))
ref.other.quantiles$Dx <- "INJURY"
ref.other.quantiles$Q <- rownames(ref.other.quantiles)
ref.score.quantiles <- rbind(ref.amr.quantiles, ref.tcmr.quantiles, ref.normal.quantiles, ref.other.quantiles)
##----------------------------------------------
## boxplots of reference biopsy molecular scores
dat <- ref.tab[ref.tab$Dx_simple=="amr",]
dat <- dat[,dx_scores]
#amr_order <- names(ref.amr.median[order(ref.amr.median, decreasing=F)])
#dat <- dat[,amr_order]
colnames(dat) <- gsub("_score", "", colnames(dat))
suppressWarnings({
dat.m <- reshape2::melt(dat)
})
dat.m$value <- dat.m$value * 100
boxplot_amr <- ggplot(data=dat.m, aes(x=reorder(variable, value, median, order=TRUE), y=value)) +
ggtitle("AMR reference biopsies") +
ylab("molecular score (%)") + xlab("") + ylim(c(0, 100)) +
geom_hline(yintercept=50, linetype="dashed", color="slategray") +
geom_boxplot(color="steelblue4", fill="whitesmoke") +
theme(legend.title=element_blank(),
panel.grid.minor=element_line(colour="gray"),
panel.grid.major=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="white"),
axis.text.x=element_text(face="bold", size=14, angle=0),
axis.title.x=element_text(face="bold", size=14, angle=0),
axis.text.y=element_text(size=14, angle=0),
axis.title.y=element_text(face="bold", size=14),
panel.border=element_rect(colour="gray", fill=NA, size=1))
##--------------------------
## combine refset and new molecular scores
## scores to input to PCA
pca_scores <- c("amr", "tcmr", "normal")
## keep only Bx with all molecular scores
mscores_pca <- ref.tab[apply(ref.tab[,pca_scores], 1, function(x) { all(!is.na(x)) }),]
## add scores for new sample
mscores_pca <- rbind(mscores_pca[,pca_scores], new_scores[,pca_scores])
resPCA <- FactoMineR::PCA(mscores_pca[,!colnames(mscores_pca) %in% "ID"], scale.unit=FALSE, ncp=5, graph=FALSE)
pca.df <- as.data.frame(resPCA$ind$coord)
pca.df$ID <- rownames(pca.df)
head(ref.tab)
pca.df <- merge(pca.df, ref.tab[,c("ID", "Dx_simple")], by="ID", all.x=TRUE)
pca.df$Dx <- ifelse(pca.df$ID %in% new_scores$ID, "new", pca.df$Dx)
## highlight new biopsy
pca.df <- plyr::mutate(pca.df, ref=ifelse(pca.df$Dx!="new", "ref", "new"))
my_cols=c("firebrick",  "blue3", "mediumpurple", "turquoise", "orangered", "dodgerblue", "salmon",
"olivedrab2","darkgreen", "black", "palegreen", "lightgray")
pca_new_1_2 <- ggplot() +
scale_fill_manual(values=my_cols) +
#geom_point(data=pca.df, aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=4, alpha=0.7) +
geom_point(data=pca.df[pca.df$ref=="ref",], aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=3, alpha=0.8) +
geom_point(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2), shape=23, size=4, alpha=1, fill="orange") +
#geom_text_repel(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2, label=ID), size=2, colour="orange") +
xlab(paste("PC1 ", round(resPCA$eig[1,2]),"% of variance",sep="")) +
ylab(paste("PC2 ", round(resPCA$eig[2,2]),"% of variance",sep="")) +
theme(legend.position="top", legend.title=element_blank(),
panel.grid.minor=element_line(colour="gray"), panel.grid.major=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="white"),
axis.text=element_text(size=12),
axis.text.x=element_text(face="bold", size=12, angle=0),
axis.title.x=element_text(face="bold", size=12, angle=0),
axis.title.y=element_text(face="bold", size=12),
panel.border=element_rect(colour="white", fill=NA, size=5))
pca_new_1_2
pca.df <- as.data.frame(resPCA$ind$coord)
pca.df$ID <- rownames(pca.df)
pca.df <- merge(pca.df, ref.tab[,c("ID", "Dx")], by="ID", all.x=TRUE)
pca.df$Dx <- ifelse(pca.df$ID %in% new_scores$ID, "new", pca.df$Dx)
pca.df$Dx
dx_other
pca.df$Dx <- ifelse(pca.df$Dx %in% dx_normal, "No rejection/injury Dx",
ifelse(!pca.df$Dx %in% c(dx_amr, dx_tcmr, dx_normal), "Injury w/o rejection", pca.df$Dx))
table(pca.df$Dx)
pca.df <- as.data.frame(resPCA$ind$coord)
pca.df$ID <- rownames(pca.df)
pca.df <- merge(pca.df, ref.tab[,c("ID", "Dx")], by="ID", all.x=TRUE)
pca.df$Dx <- ifelse(pca.df$ID %in% new_scores$ID, "new", pca.df$Dx)
table( pca.df$Dx )
dx_normal
pca.df$Dx <- ifelse(ifelse(!pca.df$Dx %in% c(dx_amr, dx_tcmr, dx_normal, new), "Injury w/o rejection",
ifelse(pca.df$Dx %in% dx_normal, "No rejection/injury Dx", pca.df$Dx))
)
table(pca.df$Dx)
pca.df <- as.data.frame(resPCA$ind$coord)
pca.df$ID <- rownames(pca.df)
pca.df <- merge(pca.df, ref.tab[,c("ID", "Dx")], by="ID", all.x=TRUE)
pca.df$Dx <- ifelse(pca.df$ID %in% new_scores$ID, "new", pca.df$Dx)
## simplify Dx
pca.df$Dx <- ifelse(!pca.df$Dx %in% c(dx_amr, dx_tcmr, dx_normal, new), "Injury w/o rejection",
ifelse(pca.df$Dx %in% dx_normal, "No rejection/injury Dx", pca.df$Dx))
table(pca.df$Dx)
dx_amr
pca.df <- as.data.frame(resPCA$ind$coord)
pca.df$ID <- rownames(pca.df)
pca.df <- merge(pca.df, ref.tab[,c("ID", "Dx")], by="ID", all.x=TRUE)
pca.df$Dx <- ifelse(pca.df$ID %in% new_scores$ID, "new", pca.df$Dx)
## simplify Dx
pca.df$Dx <- ifelse(pca.df$Dx %in% c(dx_amr, dx_tcmr, dx_normal, new), pca.df$Dx,
ifelse(pca.df$Dx %in% dx_normal, "No rejection/injury Dx", "Injury w/o rejection"))
table(pca.df$Dx)
pca.df <- as.data.frame(resPCA$ind$coord)
pca.df$ID <- rownames(pca.df)
pca.df <- merge(pca.df, ref.tab[,c("ID", "Dx")], by="ID", all.x=TRUE)
pca.df$Dx <- ifelse(pca.df$ID %in% new_scores$ID, "new", pca.df$Dx)
ifelse(pca.df$Dx %in% c(dx_amr, dx_tcmr, dx_normal, new), pca.df$Dx, "Injury w/o rejection"))
ifelse(pca.df$Dx %in% c(dx_amr, dx_tcmr, dx_normal, new), pca.df$Dx, "Injury w/o rejection")
table(ifelse(pca.df$Dx %in% c(dx_amr, dx_tcmr, dx_normal, new), pca.df$Dx, "Injury w/o rejection"))
pca.df$Dx
dx_amr
pca.df$Dx %in% c(dx_amr, dx_tcmr, dx_normal, new)
pca.df$Dx[pca.df$Dx %in% c(dx_amr, dx_tcmr, dx_normal, new)]
table(pca.df$Dx[pca.df$Dx %in% c(dx_amr, dx_tcmr, dx_normal, new)])
table(ifelse(pca.df$Dx %in% c(dx_tcmr, dx_amr, dx_normal, new), pca.df$Dx, "Injury w/o rejection"))
pca.df <- as.data.frame(resPCA$ind$coord)
pca.df$ID <- rownames(pca.df)
pca.df <- merge(pca.df, ref.tab[,c("ID", "Dx")], by="ID", all.x=TRUE)
pca.df$Dx <- ifelse(pca.df$ID %in% new_scores$ID, "new", pca.df$Dx)
pca.df$Dx
table( ifelse(pca.df$Dx %in% c(dx_amr, dx_normal, new), pca.df$Dx, "Injury w/o rejection"))
pca.df$Dx %in% dx_amr
pca.df$Dx
dx_amr
head(mscores_aa_all)
head(ref.tab)
ref.tab$Dx
head(dx_ref)
dx_ref$Dx
dx_ref
dx_ref$Dx
table(dx_ref$Dx)
dx_amr <- c("Active AMR", "Chronic active AMR", "Chronic inactive AMR")
dx_tcmr <- c("Acute TCMR", "Chronic active TCMR")
dx_normal <- c("Normal or minimal changes", "Pristine")
dx_no_rejection <- unique(dx_ref$Dx)[!unique(dx_ref$Dx) %in% c(dx_amr, dx_tcmr)]
pca.df <- as.data.frame(resPCA$ind$coord)
pca.df$ID <- rownames(pca.df)
pca.df <- merge(pca.df, ref.tab[,c("ID", "Dx")], by="ID", all.x=TRUE)
pca.df$Dx <- ifelse(pca.df$ID %in% new_scores$ID, "new", pca.df$Dx)
pca.df$Dx <- ifelse(pca.df$Dx %in% c(dx_amr, dx_tcmr, dx_normal, new), pca.df$Dx, "Injury w/o rejection")
pca.df$Dx <- ifelse(pca.df$Dx %in% dx_normal, "No rejection/injury Dx")
pca.df <- as.data.frame(resPCA$ind$coord)
pca.df$ID <- rownames(pca.df)
pca.df <- merge(pca.df, ref.tab[,c("ID", "Dx")], by="ID", all.x=TRUE)
pca.df$Dx <- ifelse(pca.df$ID %in% new_scores$ID, "new", pca.df$Dx)
pca.df$Dx <- ifelse(pca.df$Dx %in% c(dx_amr, dx_tcmr, dx_normal, new), pca.df$Dx, "Injury w/o rejection")
table(pca.df$Dx)
pca.df <- as.data.frame(resPCA$ind$coord)
pca.df$ID <- rownames(pca.df)
pca.df <- merge(pca.df, ref.tab[,c("ID", "Dx")], by="ID", all.x=TRUE)
pca.df$Dx <- ifelse(pca.df$ID %in% new_scores$ID, "new", pca.df$Dx)
## simplify Dx
pca.df$Dx <- ifelse(pca.df$Dx %in% c(dx_amr, dx_tcmr, dx_normal, "new"), pca.df$Dx, "Injury w/o rejection")
table(pca.df$Dx)
## highlight new biopsy
pca.df <- plyr::mutate(pca.df, ref=ifelse(pca.df$Dx!="new", "ref", "new"))
#col_vector=c("firebrick",  "blue3", "mediumpurple", "turquoise", "orangered", "dodgerblue", "salmon",
#	     "olivedrab2","darkgreen", "black", "palegreen", "lightgray")
col_vector=c("firebrick",  "blue3", "mediumpurple", "turquoise", "orangered")
pca_new_1_2 <- ggplot() +
scale_fill_manual(values=col_vector) +
#geom_point(data=pca.df, aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=4, alpha=0.7) +
geom_point(data=pca.df[pca.df$ref=="ref",], aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=3, alpha=0.8) +
geom_point(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2), shape=23, size=4, alpha=1, fill="orange") +
#geom_text_repel(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2, label=ID), size=2, colour="orange") +
xlab(paste("PC1 ", round(resPCA$eig[1,2]),"% of variance",sep="")) +
ylab(paste("PC2 ", round(resPCA$eig[2,2]),"% of variance",sep="")) +
theme(legend.position="top", legend.title=element_blank(),
panel.grid.minor=element_line(colour="gray"), panel.grid.major=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="white"),
axis.text=element_text(size=12),
axis.text.x=element_text(face="bold", size=12, angle=0),
axis.title.x=element_text(face="bold", size=12, angle=0),
axis.title.y=element_text(face="bold", size=12),
panel.border=element_rect(colour="white", fill=NA, size=5))
pca_new_1_2
col_vector=c("firebrick",  "blue3", "mediumpurple", "turquoise", "orangered", "dodgerblue", "salmon",
#	     "olivedrab2","darkgreen", "black", "palegreen", "lightgray")
pca_new_1_2 <- ggplot() +
scale_fill_manual(values=col_vector) +
#geom_point(data=pca.df, aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=4, alpha=0.7) +
geom_point(data=pca.df[pca.df$ref=="ref",], aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=3, alpha=0.8) +
geom_point(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2), shape=23, size=4, alpha=1, fill="orange") +
#geom_text_repel(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2, label=ID), size=2, colour="orange") +
xlab(paste("PC1 ", round(resPCA$eig[1,2]),"% of variance",sep="")) +
ylab(paste("PC2 ", round(resPCA$eig[2,2]),"% of variance",sep="")) +
theme(legend.position="top", legend.title=element_blank(),
panel.grid.minor=element_line(colour="gray"), panel.grid.major=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="white"),
axis.text=element_text(size=12),
axis.text.x=element_text(face="bold", size=12, angle=0),
axis.title.x=element_text(face="bold", size=12, angle=0),
axis.title.y=element_text(face="bold", size=12),
panel.border=element_rect(colour="white", fill=NA, size=5))
pca_new_1_2
ggplot() +
scale_fill_manual(values=col_vector) +
#geom_point(data=pca.df, aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=4, alpha=0.7) +
geom_point(data=pca.df[pca.df$ref=="ref",], aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=3, alpha=0.8) +
geom_point(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2), shape=23, size=4, alpha=1, fill="orange") +
#geom_text_repel(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2, label=ID), size=2, colour="orange") +
xlab(paste("PC1 ", round(resPCA$eig[1,2]),"% of variance",sep="")) +
ylab(paste("PC2 ", round(resPCA$eig[2,2]),"% of variance",sep=""))
col_vector=c("firebrick",  "blue3", "mediumpurple", "turquoise", "orangered", "dodgerblue", "salmon",
"olivedrab2","darkgreen", "black", "palegreen", "lightgray")
pca_new_1_2 <- ggplot() +
scale_fill_manual(values=col_vector) +
#geom_point(data=pca.df, aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=4, alpha=0.7) +
geom_point(data=pca.df[pca.df$ref=="ref",], aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=3, alpha=0.8) +
geom_point(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2), shape=23, size=4, alpha=1, fill="orange") +
#geom_text_repel(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2, label=ID), size=2, colour="orange") +
xlab(paste("PC1 ", round(resPCA$eig[1,2]),"% of variance",sep="")) +
ylab(paste("PC2 ", round(resPCA$eig[2,2]),"% of variance",sep="")) +
theme(legend.position="top", legend.title=element_blank(),
panel.grid.minor=element_line(colour="gray"), panel.grid.major=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="white"),
axis.text=element_text(size=12),
axis.text.x=element_text(face="bold", size=12, angle=0),
axis.title.x=element_text(face="bold", size=12, angle=0),
axis.title.y=element_text(face="bold", size=12),
panel.border=element_rect(colour="white", fill=NA, size=5))
pca_new_1_2
#col_vector=c("firebrick",  "blue3", "mediumpurple", "turquoise", "orangered", "dodgerblue", "salmon",
#	     "olivedrab2","darkgreen", "black", "palegreen", "lightgray")
col_vector=c("firebrick",  "blue3", "lightgray", "black", "orangered", "dodgerblue", "salmon",)
pca_new_1_2 <- ggplot() +
scale_fill_manual(values=col_vector) +
#geom_point(data=pca.df, aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=4, alpha=0.7) +
geom_point(data=pca.df[pca.df$ref=="ref",], aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=3, alpha=0.8) +
geom_point(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2), shape=23, size=4, alpha=1, fill="orange") +
#geom_text_repel(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2, label=ID), size=2, colour="orange") +
xlab(paste("PC1 ", round(resPCA$eig[1,2]),"% of variance",sep="")) +
ylab(paste("PC2 ", round(resPCA$eig[2,2]),"% of variance",sep="")) +
theme(legend.position="top", legend.title=element_blank(),
panel.grid.minor=element_line(colour="gray"), panel.grid.major=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="white"),
axis.text=element_text(size=12),
axis.text.x=element_text(face="bold", size=12, angle=0),
axis.title.x=element_text(face="bold", size=12, angle=0),
axis.title.y=element_text(face="bold", size=12),
panel.border=element_rect(colour="white", fill=NA, size=5))
#col_vector=c("firebrick",  "blue3", "mediumpurple", "turquoise", "orangered", "dodgerblue", "salmon",
#	     "olivedrab2","darkgreen", "black", "palegreen", "lightgray")
col_vector=c("firebrick",  "blue3", "lightgray", "black", "orangered", "dodgerblue", "salmon")
pca_new_1_2 <- ggplot() +
scale_fill_manual(values=col_vector) +
#geom_point(data=pca.df, aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=4, alpha=0.7) +
geom_point(data=pca.df[pca.df$ref=="ref",], aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=3, alpha=0.8) +
geom_point(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2), shape=23, size=4, alpha=1, fill="orange") +
#geom_text_repel(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2, label=ID), size=2, colour="orange") +
xlab(paste("PC1 ", round(resPCA$eig[1,2]),"% of variance",sep="")) +
ylab(paste("PC2 ", round(resPCA$eig[2,2]),"% of variance",sep="")) +
theme(legend.position="top", legend.title=element_blank(),
panel.grid.minor=element_line(colour="gray"), panel.grid.major=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="white"),
axis.text=element_text(size=12),
axis.text.x=element_text(face="bold", size=12, angle=0),
axis.title.x=element_text(face="bold", size=12, angle=0),
axis.title.y=element_text(face="bold", size=12),
panel.border=element_rect(colour="white", fill=NA, size=5))
pca_new_1_2
#col_vector=c("firebrick",  "blue3", "mediumpurple", "turquoise", "orangered", "dodgerblue", "salmon",
#	     "olivedrab2","darkgreen", "black", "palegreen", "lightgray")
col_vector=c("firebrick",  "blue3", "lightgray", "gray", "black", "orangered", "dodgerblue", "salmon")
pca_new_1_2 <- ggplot() +
scale_fill_manual(values=col_vector) +
#geom_point(data=pca.df, aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=4, alpha=0.7) +
geom_point(data=pca.df[pca.df$ref=="ref",], aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=3, alpha=0.8) +
geom_point(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2), shape=23, size=4, alpha=1, fill="orange") +
#geom_text_repel(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2, label=ID), size=2, colour="orange") +
xlab(paste("PC1 ", round(resPCA$eig[1,2]),"% of variance",sep="")) +
ylab(paste("PC2 ", round(resPCA$eig[2,2]),"% of variance",sep="")) +
theme(legend.position="top", legend.title=element_blank(),
panel.grid.minor=element_line(colour="gray"), panel.grid.major=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="white"),
axis.text=element_text(size=12),
axis.text.x=element_text(face="bold", size=12, angle=0),
axis.title.x=element_text(face="bold", size=12, angle=0),
axis.title.y=element_text(face="bold", size=12),
panel.border=element_rect(colour="white", fill=NA, size=5))
pca_new_1_2
#col_vector=c("firebrick",  "blue3", "mediumpurple", "turquoise", "orangered", "dodgerblue", "salmon",
#	     "olivedrab2","darkgreen", "black", "palegreen", "lightgray")
col_vector=c("firebrick",  "blue3", "salmon", "dodgerblue", "orangered", "black", "gray", "lightgray")
pca_new_1_2 <- ggplot() +
scale_fill_manual(values=col_vector) +
#geom_point(data=pca.df, aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=4, alpha=0.7) +
geom_point(data=pca.df[pca.df$ref=="ref",], aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=3, alpha=0.8) +
geom_point(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2), shape=23, size=4, alpha=1, fill="orange") +
#geom_text_repel(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2, label=ID), size=2, colour="orange") +
xlab(paste("PC1 ", round(resPCA$eig[1,2]),"% of variance",sep="")) +
ylab(paste("PC2 ", round(resPCA$eig[2,2]),"% of variance",sep="")) +
theme(legend.position="top", legend.title=element_blank(),
panel.grid.minor=element_line(colour="gray"), panel.grid.major=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="white"),
axis.text=element_text(size=12),
axis.text.x=element_text(face="bold", size=12, angle=0),
axis.title.x=element_text(face="bold", size=12, angle=0),
axis.title.y=element_text(face="bold", size=12),
panel.border=element_rect(colour="white", fill=NA, size=5))
pca_new_1_2
#col_vector=c("firebrick",  "blue3", "mediumpurple", "turquoise", "orangered", "dodgerblue", "salmon",
#	     "olivedrab2","darkgreen", "black", "palegreen", "lightgray")
col_vector=c("firebrick",  "blue3", "salmon", "dodgerblue", "orangered", "gray36", "black", "lightgray")
pca_new_1_2 <- ggplot() +
scale_fill_manual(values=col_vector) +
#geom_point(data=pca.df, aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=4, alpha=0.7) +
geom_point(data=pca.df[pca.df$ref=="ref",], aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=3, alpha=0.8) +
geom_point(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2), shape=23, size=4, alpha=1, fill="orange") +
#geom_text_repel(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2, label=ID), size=2, colour="orange") +
xlab(paste("PC1 ", round(resPCA$eig[1,2]),"% of variance",sep="")) +
ylab(paste("PC2 ", round(resPCA$eig[2,2]),"% of variance",sep="")) +
theme(legend.position="top", legend.title=element_blank(),
panel.grid.minor=element_line(colour="gray"), panel.grid.major=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="white"),
axis.text=element_text(size=12),
axis.text.x=element_text(face="bold", size=12, angle=0),
axis.title.x=element_text(face="bold", size=12, angle=0),
axis.title.y=element_text(face="bold", size=12),
panel.border=element_rect(colour="white", fill=NA, size=5))
pca_new_1_2
#col_vector=c("firebrick",  "blue3", "mediumpurple", "turquoise", "orangered", "dodgerblue", "salmon",
#	     "olivedrab2","darkgreen", "black", "palegreen", "lightgray")
col_vector=c("firebrick",  "blue3", "salmon", "dodgerblue", "orangered", "lightgray", "black", "gray36")
pca_new_1_2 <- ggplot() +
scale_fill_manual(values=col_vector) +
#geom_point(data=pca.df, aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=4, alpha=0.7) +
geom_point(data=pca.df[pca.df$ref=="ref",], aes(Dim.1, Dim.2, fill=Dx), shape=21, color="gray", size=3, alpha=0.8) +
geom_point(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2), shape=23, size=4, alpha=1, fill="orange") +
#geom_text_repel(data=pca.df[pca.df$ref=="new",], aes(Dim.1, Dim.2, label=ID), size=2, colour="orange") +
xlab(paste("PC1 ", round(resPCA$eig[1,2]),"% of variance",sep="")) +
ylab(paste("PC2 ", round(resPCA$eig[2,2]),"% of variance",sep="")) +
theme(legend.position="top", legend.title=element_blank(),
panel.grid.minor=element_line(colour="gray"), panel.grid.major=element_blank(),
panel.background=element_blank(),
axis.line=element_line(colour="white"),
axis.text=element_text(size=12),
axis.text.x=element_text(face="bold", size=12, angle=0),
axis.title.x=element_text(face="bold", size=12, angle=0),
axis.title.y=element_text(face="bold", size=12),
panel.border=element_rect(colour="white", fill=NA, size=5))
pca_new_1_2
ms_ref
newRCC='../test_files/test.RCC'
source('../scripts/BHOTpred.R')
newPreds <- BHOTpred(newRCC, outPath, saveFiles=FALSE)
newID <- newPreds$new_scores$ID
newQC <- rccQC(newRCC, outPath)
newPath <- normalizePath(dirname(newRCC))
dir.create(paste0(newPath, '/histomx_results/'), recursive=TRUE, showWarnings=FALSE)
outPath=paste0(newPath, '/histomx_results/')
newPreds <- BHOTpred(newRCC, outPath, saveFiles=FALSE)
newID <- newPreds$new_scores$ID
newQC <- rccQC(newRCC, outPath)
newPreds <- BHOTpred(newRCC, outPath, saveFiles=FALSE)
newID <- newPreds$new_scores$ID
newQC <- rccQC(newRCC, outPath)
dx_tab
dx_tab <- merge(ms_new, tab[,c("Diagnosis", "CI", "Normal range")], by="Diagnosis")
ms_new <- data.frame(t(newPreds$new_scores[,c("amr", "tcmr", "normal", "other")]), check.names=FALSE)
ms_new$Diagnosis <- rownames(ms_new)
ci_tab <- data.frame(newPreds$new_scores[,grep("_ci", names(newPreds$new_scores))])
ci_new <- data.frame(amr=paste(ci_tab$amr_lwr_ci, "-", ci_tab$amr_upr_ci),
tcmr=paste(ci_tab$tcmr_lwr_ci, "-", ci_tab$tcmr_upr_ci),
normal=paste(ci_tab$normal_lwr_ci, "-", ci_tab$normal_upr_ci),
other=paste(ci_tab$other_lwr_ci, "-", ci_tab$other_upr_ci))
ci_new <- data.frame(CI=t(ci_new))
ci_new$Diagnosis <- rownames(ci_new)
## reference set quantiles
ms_ref <- newPreds$ref_scores[,c("Dx", "amr", "tcmr", "normal", "other", "Q")]
## q1 and q3 (can also add IQR, min, max)
tab <- data.frame(matrix(nrow=dim(ms_new)[1], ncol=2), check.names=FALSE)
colnames(tab) <- c("No rejection Q1", "No rejection Q3")
rownames(tab) <- rownames(ms_new)
## rows=molecular scores; columns=histo diagnosis
## reference biopsy AMR molecular score ranges
tab[rownames(tab)=="amr","No rejection Q1"] <- ms_ref[ms_ref$Dx=="NONREJECTION" & ms_ref$Q=="25%","amr"]
tab[rownames(tab)=="amr","No rejection Q3"] <- ms_ref[ms_ref$Dx=="NONREJECTION" & ms_ref$Q=="75%","amr"]
## reference biopsy TCMR molecular score ranges
tab[rownames(tab)=="tcmr","No rejection Q1"] <- ms_ref[ms_ref$Dx=="NONREJECTION" & ms_ref$Q=="25%","tcmr"]
tab[rownames(tab)=="tcmr","No rejection Q3"] <- ms_ref[ms_ref$Dx=="NONREJECTION" & ms_ref$Q=="75%","tcmr"]
## reference biopsy Nonrejection molecular score ranges
tab[rownames(tab)=="normal","No rejection Q1"] <- ms_ref[ms_ref$Dx=="NONREJECTION" & ms_ref$Q=="25%","normal"]
tab[rownames(tab)=="normal","No rejection Q3"] <- ms_ref[ms_ref$Dx=="NONREJECTION" & ms_ref$Q=="75%","normal"]
## reference biopsy non-rejection related injury molecular score ranges
tab[rownames(tab)=="other","No rejection Q1"] <- ms_ref[ms_ref$Dx=="NONREJECTION" & ms_ref$Q=="25%","other"]
tab[rownames(tab)=="other","No rejection Q3"] <- ms_ref[ms_ref$Dx=="NONREJECTION" & ms_ref$Q=="75%","other"]
tab$'Normal range' <- paste(tab$`No rejection Q1`, "-", tab$`No rejection Q3`)
tab$'Diagnosis' <- rownames(tab)
tab <- merge(tab, ci_new, by="Diagnosis")
dx_tab <- merge(ms_new, tab[,c("Diagnosis", "CI", "Normal range")], by="Diagnosis")
colnames(dx_tab)[colnames(dx_tab)=="CI"]<-paste(newID, "range")
dx_tab
dx_order <- c("amr", "tcmr", "normal", "other")
dx_tab %>% dplyr::slice(match(dx_order, Diagnosis))
dx_tab <- dx_tab %>% dplyr::slice(match(dx_order, Diagnosis))
