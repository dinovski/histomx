dim(mat)
##----------------
## lasso regularization
train.control <- trainControl(classProbs=TRUE, savePredictions="final", verbose=TRUE)
# tune probit v. logit and modeltype parallel (proportional odds) v. nonparallel (non-proportional odds) v. semiparallel
lasso.grid <- expand.grid(alpha=1, criteria='bic',
link='probit', lambda = seq(0.0001, 1, length = 100),
modeltype='semiparallel', family='cumulative')
set.seed(18)
ordinal.lasso <- train(x=as.matrix(mat),
y=outcomes,
method='ordinalNet',
preProc = c("center", "scale"),
trControl=train.control,
tuneGrid=lasso.grid)
ordinal.lasso$bestTune
coefs = coef(ordinal.lasso$finalModel, ordinal.lasso$finalModel$lambdaVals)
head(coefs)
coefs = coef(ordinal.lasso$finalModel, ordinal.lasso$finalModel$lambdaVals)
gene_list <- list()
for (n in 1:length(names(coefs))) {
coef_df <- data.frame(gene = rownames(coefs[[n]]), value = coefs[[n]][,1])
weighted_genes <- coef_df[coef_df$value!=0,1]
gene_list[[n]] <- weighted_genes
}
length(names(coefs)
)
names(coefs)
class(coefs)
data.frame(coefs)
head(data.frame(coefs))
coefs <- data.frame(coefs)
gene_list <- list()
for (n in 1:length(names(coefs))) {
coef_df <- data.frame(gene = rownames(coefs[[n]]), value = coefs[[n]][,1])
weighted_genes <- coef_df[coef_df$value!=0,1]
gene_list[[n]] <- weighted_genes
}
length(names(coefs)
)
names(coefs)
n-1
coef_df <- data.frame(gene = rownames(coefs[[n]]), value = coefs[[n]][,1])
coefs[[1]]
coefs[[2]]
coefs[[3]]
1:length(names(coefs))
coefs[[1]]
coef_df <- data.frame(gene = rownames(coefs[[n]]), value = coefs[[n]])
head(coefs)
coefs = coef(ordinal.lasso$finalModel, ordinal.lasso$finalModel$lambdaVals)
coefs <- data.frame(coefs)
coefs$gene <- rownames(coefs)
coef_df <- coefs[,c("gene", n)]
n
head(coefs)
coefs[,c("gene", 1)]
coefs = coef(ordinal.lasso$finalModel, ordinal.lasso$finalModel$lambdaVals)
coefs <- data.frame(coefs)
coef_df <- data.frame(gene = rownames(coefs[n,]), value = coefs[,n])
head(coef_df)
coef_df
coefs = coef(ordinal.lasso$finalModel, ordinal.lasso$finalModel$lambdaVals)
coefs <- data.frame(coefs)
coefs
coef_df <- data.frame(gene = rownames(coefs[n]), value = coefs[,n])
head(coef_df)
gene_list <- list()
for (n in 1:length(names(coefs))) {
coef_df <- data.frame(gene = rownames(coefs[n]), value = coefs[,n])
weighted_genes <- coef_df[coef_df$value!=0,1]
gene_list[[n]] <- weighted_genes
}
names(gene_list) <- names(coefs)
top.genes <- do.call(rbind, lapply(gene_list, as.data.frame))
top.genes <- top.genes[top.genes != "(Intercept)",]
top.genes[duplicated(top.genes)]
top.genes <- unique(top.genes)
length(top.genes)
top.genes
## use mean and standard deviation from training data to to process test data before prediction
preProcValues <- preProcess(mat, method = c("center", "scale"))
preProcValues
dim(mat)
length(sig.gnes)
length(sig.genes)
?ordinalbayes
??ordinalbayes
install.packages("ordinalbayes")
library(ordinalbayes)
install.packages("ordinalbayes")
# top DEGs
sig.genes[1:25]
sig.genes[1:25] %in% top.genes
length(top.genes)
top.genes[top.genes %in% sig.genes[1:23]]
length(top.genes[top.genes %in% sig.genes[1:23]])
preProcValues
head(mat)
dim(mat)
length(top.genes[top.genes %in% sig.genes[1:23]])
gene_sel <- top.genes #lasso
gene_sel <- sig.genes[1:23]
gene_sel <- top.genes #lasso
## scale training and test data
train_sig <- mat[.colnames(mat) %in% gene_sel]
test_sig <-  test_norm[,colnames(test_norm) %in% gene_sel]
## scale training and test data
train_sig <- mat[,colnames(mat) %in% gene_sel]
test_sig <-  test_norm[,colnames(test_norm) %in% gene_sel]
dim(train_sig)
dim(test_sig)
preProcValues <- caret::preProcess(train_sig, method = c("center", "scale"))
preProcValues <- caret::preProcess(train_sig, method = c("center", "scale"))
train_sig_scale <- predict(preProcValues, train_sig)
test_sig_scale <- predict(preProcValues, test_sig)
test_sig_scale
test_sig
train_sig_scale$class <- mat$class[match(rownames(train_sig_scale), rownames(mat))]
# ordinal cumulative link model on sig genes
ord.fit <- ordinal::clm(formula=class ~ ., data=train_sig_scale, link="probit")
colnames(train_sig_scale)
mat$class[match(rownames(train_sig_scale), rownames(mat))]
rownames(mat$class[match(rownames(train_sig_scale), rownames(mat))])
heaD(train_sig_scle)
head(train_sig_scle)
head(train_sig_scale)
rownames(train_sig_scale)
mat$class
train_sig_scale$class <- ref.df$g_score[match(rownames(train_sig_scale), ref.df$ID)]
# ordinal cumulative link model on sig genes
ord.fit <- ordinal::clm(formula=class ~ ., data=train_sig_scale, link="probit")
train_sig_scale$class <- as.factor(ref.df$g_score[match(rownames(train_sig_scale), ref.df$ID)])
head(train_sig_scale)
# ordinal cumulative link model on sig genes
ord.fit <- ordinal::clm(formula=class ~ ., data=train_sig_scale, link="probit")
summary(ord.fit)$coefficients
## training data
train.preds <- data.frame(g=predict(ord.fit, newdata=train_sig_scale[,!colnames(train_sig_scale) %in% "class"], type="prob"))
train.preds <- round(train.preds*100, 2)
colnames(train.preds) <- gsub(".fit.", "", colnames(train.preds))
train.preds$ID <- rownames(train_sig_scale)
train.preds$g_score <- train.df$g_score[match(train.preds$ID, train.df$ID)]
head(train.preds)
## training data
train.preds <- data.frame(g=predict(ord.fit, newdata=train_sig_scale[,!colnames(train_sig_scale) %in% "class"], type="prob"))
train.preds <- round(train.preds*100, 2)
colnames(train.preds) <- gsub(".fit.", "", colnames(train.preds))
train.preds$pred_score <- predict(ord.fit, newdata=train_sig_scale[,!colnames(train_sig_scale) %in% "class"], type="class")
train.preds$ID <- rownames(train_sig_scale)
train.preds$g_score <- train.df$g_score[match(train.preds$ID, train.df$ID)]
head(train.preds)
predict(ord.fit, newdata=train_sig_scale[,!colnames(train_sig_scale) %in% "class"], type="class")
predict(ord.fit, newdata=train_sig_scale[,!colnames(train_sig_scale) %in% "class"], type="class")$fit
## training data
train.preds <- data.frame(g=predict(ord.fit, newdata=train_sig_scale[,!colnames(train_sig_scale) %in% "class"], type="prob"))
train.preds <- round(train.preds*100, 2)
colnames(train.preds) <- gsub(".fit.", "", colnames(train.preds))
train.preds$pred_score <- predict(ord.fit, newdata=train_sig_scale[,!colnames(train_sig_scale) %in% "class"], type="class")$fit
train.preds$ID <- rownames(train_sig_scale)
train.preds$g_score <- train.df$g_score[match(train.preds$ID, train.df$ID)]
train.preds
head(train.preds)
test.preds <- data.frame(g=predict(ord.fit, newdata=test_sig_scale[,colnames(test_sig_scale) %in% sig.genes], type="prob"))
test.preds <- round(test.preds*100, 2)
colnames(test.preds) <- gsub(".fit.", "", colnames(test.preds))
test.preds$pred_score <- predict(ord.fit, newdata=test_sig_scale[,!colnames(test_sig_scale) %in% "class"], type="class")$fit
test.preds$g_score <- test.df$g_score[match(test.preds$ID, test.df$ID)]
test.preds$ID <- rownames(test_sig_scale)
test.df
## training data
train.preds <- data.frame(g=predict(ord.fit, newdata=train_sig_scale[,!colnames(train_sig_scale) %in% "class"], type="prob"))
train.preds <- round(train.preds*100, 2)
colnames(train.preds) <- gsub(".fit.", "", colnames(train.preds))
train.preds$ID <- rownames(train_sig_scale)
train.preds$pred_score <- predict(ord.fit, newdata=train_sig_scale[,!colnames(train_sig_scale) %in% "class"], type="class")$fit
train.preds$g_score <- train.df$g_score[match(train.preds$ID, train.df$ID)]
## test data
test.preds <- data.frame(g=predict(ord.fit, newdata=test_sig_scale[,colnames(test_sig_scale) %in% sig.genes], type="prob"))
test.preds <- round(test.preds*100, 2)
colnames(test.preds) <- gsub(".fit.", "", colnames(test.preds))
test.preds$ID <- rownames(test_sig_scale)
test.preds$pred_score <- predict(ord.fit, newdata=test_sig_scale[,!colnames(test_sig_scale) %in% "class"], type="class")$fit
test.preds$g_score <- test.df$g_score[match(test.preds$ID, test.df$ID)]
head(test.preds)
g_train <- modelEval(true_values=train.df$g_score, predicted_values=train.df$pred_score, print.results=FALSE)
train.df$g_score
train.df$pred_score
g_train <- modelEval(true_values=train.preds$g_score, predicted_values=train.preds$pred_score, print.results=FALSE)
train.preds$g_score
train.preds$g_score <- as.factor(train.preds$g_score, ordered=T)
train.preds$g_score <- factor(train.preds$g_score, ordered=T)
train.preds$pred_score <- factor(train.preds$pred_score, ordered=T)
train.preds$pred_score
g_train <- modelEval(true_values=train.preds$g_score, predicted_values=train.preds$pred_score, print.results=FALSE)
## training data
train.preds <- data.frame(g=predict(ord.fit, newdata=train_sig_scale[,!colnames(train_sig_scale) %in% "class"], type="prob"))
train.preds <- round(train.preds*100, 2)
colnames(train.preds) <- gsub(".fit.", "", colnames(train.preds))
train.preds$ID <- rownames(train_sig_scale)
train.preds$pred_score <- predict(ord.fit, newdata=train_sig_scale[,!colnames(train_sig_scale) %in% "class"], type="class")$fit
train.preds$g_score <- train.df$g_score[match(train.preds$ID, train.df$ID)]
train.preds$g_score <- factor(train.preds$g_score, ordered=T)
g_train <- modelEval(true_values=train.preds$g_score, predicted_values=train.preds$pred_score, print.results=FALSE)
train.preds$pred_score
train.preds$pred_score<-as.numeric(train.preds$pred_score)
g_train <- modelEval(true_values=train.preds$g_score, predicted_values=train.preds$pred_score, print.results=FALSE)
ifelse(train.preds$g_score==0,1,0)
g0_train <- modelEval(true_values=ifelse(train.preds$g_score==0,1,0), predicted_values=train.preds$pred_score, threshold=0.5, print.results=FALSE)
g0_train
g1_train <- modelEval(true_values=ifelse(train.preds$g_score==1,1,0), predicted_values=train.preds$pred_score, threshold=0.5, print.results=FALSE)
g2_train <- modelEval(true_values=ifelse(train.preds$g_score==2,1,0), predicted_values=train.preds$pred_score, threshold=0.5, print.results=FALSE)
g3_train <- modelEval(true_values=ifelse(train.preds$g_score==3,1,0), predicted_values=train.preds$pred_score, threshold=0.5, print.results=FALSE)
## test data
test.preds <- data.frame(g=predict(ord.fit, newdata=test_sig_scale[,colnames(test_sig_scale) %in% sig.genes], type="prob"))
test.preds <- round(test.preds*100, 2)
colnames(test.preds) <- gsub(".fit.", "", colnames(test.preds))
test.preds$ID <- rownames(test_sig_scale)
test.preds$pred_score <- predict(ord.fit, newdata=test_sig_scale[,!colnames(test_sig_scale) %in% "class"], type="class")$fit
test.preds$g_score <- test.df$g_score[match(test.preds$ID, test.df$ID)]
g0_test <- modelEval(true_values=ifelse(test.preds$g_score==0,1,0), predicted_values=test.preds$pred_score, threshold=0.5, print.results=FALSE)
## test data
test.preds <- data.frame(g=predict(ord.fit, newdata=test_sig_scale[,colnames(test_sig_scale) %in% sig.genes], type="prob"))
test.preds <- round(test.preds*100, 2)
colnames(test.preds) <- gsub(".fit.", "", colnames(test.preds))
test.preds$ID <- rownames(test_sig_scale)
test.preds$pred_score <- predict(ord.fit, newdata=test_sig_scale[,!colnames(test_sig_scale) %in% "class"], type="class")$fit
test.preds$g_score <- test.df$g_score[match(test.preds$ID, test.df$ID)]
test.preds$g_score <- factor(test.preds$g_score, ordered=T)
g0_test <- modelEval(true_values=ifelse(test.preds$g_score==0,1,0), predicted_values=test.preds$pred_score, threshold=0.5, print.results=FALSE)
g1_test <- modelEval(true_values=ifelse(test.preds$g_score==1,1,0), predicted_values=test.preds$pred_score, threshold=0.5, print.results=FALSE)
## test data
test.preds <- data.frame(g=predict(ord.fit, newdata=test_sig_scale[,colnames(test_sig_scale) %in% sig.genes], type="prob"))
test.preds <- round(test.preds*100, 2)
colnames(test.preds) <- gsub(".fit.", "", colnames(test.preds))
test.preds$ID <- rownames(test_sig_scale)
test.preds$pred_score <- predict(ord.fit, newdata=test_sig_scale[,!colnames(test_sig_scale) %in% "class"], type="class")$fit
test.preds$pred_score <- as.numeric(test.preds$pred_score)
test.preds$g_score <- test.df$g_score[match(test.preds$ID, test.df$ID)]
test.preds$g_score <- factor(test.preds$g_score, ordered=T)
g0_test <- modelEval(true_values=ifelse(test.preds$g_score==0,1,0), predicted_values=test.preds$pred_score, threshold=0.5, print.results=FALSE)
g1_test <- modelEval(true_values=ifelse(test.preds$g_score==1,1,0), predicted_values=test.preds$pred_score, threshold=0.5, print.results=FALSE)
g2_test <- modelEval(true_values=ifelse(test.preds$g_score==2,1,0), predicted_values=test.preds$pred_score, threshold=0.5, print.results=FALSE)
g3_test <- modelEval(true_values=ifelse(test.preds$g_score==3,1,0), predicted_values=test.preds$pred_score, threshold=0.5, print.results=FALSE)
g0_test
g1_test
g2_test
g3_test
## get youden cutoffs
roc <- pROC::roc(ifelse(train.preds$g_score==0,1,0), train.preds$pred_score, quiet=TRUE)
g0_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
roc <- pROC::roc(ifelse(train.preds$g_score==1,1,0), train.preds$pred_score, quiet=TRUE)
g1_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
roc <- pROC::roc(ifelse(train.preds$g_score==2,1,0), train.preds$pred_score, quiet=TRUE)
g2_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
roc <- pROC::roc(ifelse(train.preds$g_score==3,1,0), train.preds$pred_score, quiet=TRUE)
g3_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
g3_youden
g0_train <- modelEval(true_values=ifelse(train.preds$g_score==0,1,0), predicted_values=train.preds$pred_score, threshold=g0_youden, print.results=FALSE)
g0_youden
g0_train <- modelEval(true_values=ifelse(train.preds$g_score==0,1,0), predicted_values=train.preds$pred_score, threshold=g0_youden$threshold, print.results=FALSE)
g0_train <- modelEval(true_values=ifelse(train.preds$g_score==0,1,0), predicted_values=train.preds$pred_score, threshold=g0_youden$threshold, print.results=FALSE)
g1_train <- modelEval(true_values=ifelse(train.preds$g_score==1,1,0), predicted_values=train.preds$pred_score, threshold=g1_youden$threshold, print.results=FALSE)
g2_train <- modelEval(true_values=ifelse(train.preds$g_score==2,1,0), predicted_values=train.preds$pred_score, threshold=g2_youden$threshold, print.results=FALSE)
g3_train <- modelEval(true_values=ifelse(train.preds$g_score==3,1,0), predicted_values=train.preds$pred_score, threshold=g3_youden$threshold, print.results=FALSE)
g0_test <- modelEval(true_values=ifelse(test.preds$g_score==0,1,0), predicted_values=test.preds$pred_score, threshold=g0_youden$threshold, print.results=FALSE)
g1_test <- modelEval(true_values=ifelse(test.preds$g_score==1,1,0), predicted_values=test.preds$pred_score, threshold=g1_youden$threshold, print.results=FALSE)
g2_test <- modelEval(true_values=ifelse(test.preds$g_score==2,1,0), predicted_values=test.preds$pred_score, threshold=g2_youden$threshold, print.results=FALSE)
g3_test <- modelEval(true_values=ifelse(test.preds$g_score==3,1,0), predicted_values=test.preds$pred_score, threshold=g3_youden$threshold, print.results=FALSE)
g0_train
g1_train
g2_auc
g2_test
g3_test
g0_train
g1_train
g2_train
g3_train
head(test.preds)
## training data
train.preds <- data.frame(g=predict(ord.fit, newdata=train_sig_scale[,!colnames(train_sig_scale) %in% "class"], type="prob"))
train.preds <- round(train.preds*100, 2)
colnames(train.preds) <- gsub(".fit.", "", colnames(train.preds))
train.preds$ID <- rownames(train_sig_scale)
train.preds$pred_score <- predict(ord.fit, newdata=train_sig_scale[,!colnames(train_sig_scale) %in% "class"], type="class")$fit
train.preds$pred_score <- as.numeric(train.preds$pred_score)
train.preds$g_score <- train.df$g_score[match(train.preds$ID, train.df$ID)]
train.preds$g_score <- factor(train.preds$g_score, ordered=T)
## get youden cutoffs
roc <- pROC::roc(ifelse(train.preds$g_score==0,1,0), train.preds$pred_score, quiet=TRUE)
g0_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
roc <- pROC::roc(ifelse(train.preds$g_score==1,1,0), train.preds$pred_score, quiet=TRUE)
g1_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
roc <- pROC::roc(ifelse(train.preds$g_score==2,1,0), train.preds$pred_score, quiet=TRUE)
g2_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
roc <- pROC::roc(ifelse(train.preds$g_score==3,1,0), train.preds$pred_score, quiet=TRUE)
g3_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
## get youden cutoffs
roc <- pROC::roc(ifelse(train.preds$g_score==0,1,0), train.preds$g0, quiet=TRUE)
g0_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
roc <- pROC::roc(ifelse(train.preds$g_score==1,1,0), train.preds$g1, quiet=TRUE)
g1_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
roc <- pROC::roc(ifelse(train.preds$g_score==2,1,0), train.preds$g2, quiet=TRUE)
g2_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
roc <- pROC::roc(ifelse(train.preds$g_score==3,1,0), train.preds$g3, quiet=TRUE)
g3_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
g3_youden
roc <- pROC::roc(ifelse(train.preds$g_score==3,1,0), train.preds$g3, quiet=TRUE)
roc
train.preds$g0
ifelse(train.preds$g_score==0,1,0)
g2_youden
modelEval
g0_train <- modelEval(true_values=ifelse(train.preds$g_score==0,1,0), predicted_values=train.preds$g0, threshold=g0_youden$threshold, print.results=FALSE)
g1_train <- modelEval(true_values=ifelse(train.preds$g_score==1,1,0), predicted_values=train.preds$g1, threshold=g1_youden$threshold, print.results=FALSE)
g2_train <- modelEval(true_values=ifelse(train.preds$g_score==2,1,0), predicted_values=train.preds$g2, threshold=g2_youden$threshold, print.results=FALSE)
g3_train <- modelEval(true_values=ifelse(train.preds$g_score==3,1,0), predicted_values=train.preds$g3, threshold=g3_youden$threshold, print.results=FALSE)
g0_train
g0_train
g1_train
g2_train
g3_train
## test data
test.preds <- data.frame(g=predict(ord.fit, newdata=test_sig_scale[,colnames(test_sig_scale) %in% sig.genes], type="prob"))
test.preds <- round(test.preds*100, 2)
colnames(test.preds) <- gsub(".fit.", "", colnames(test.preds))
test.preds$ID <- rownames(test_sig_scale)
test.preds$pred_score <- predict(ord.fit, newdata=test_sig_scale[,!colnames(test_sig_scale) %in% "class"], type="class")$fit
test.preds$pred_score <- as.numeric(test.preds$pred_score)
test.preds$g_score <- test.df$g_score[match(test.preds$ID, test.df$ID)]
test.preds$g_score <- factor(test.preds$g_score, ordered=T)
g0_test <- modelEval(true_values=ifelse(test.preds$g_score==0,1,0), predicted_values=test.preds$g0, threshold=g0_youden$threshold, print.results=FALSE)
g1_test <- modelEval(true_values=ifelse(test.preds$g_score==1,1,0), predicted_values=test.preds$g1, threshold=g1_youden$threshold, print.results=FALSE)
g2_test <- modelEval(true_values=ifelse(test.preds$g_score==2,1,0), predicted_values=test.preds$g2, threshold=g2_youden$threshold, print.results=FALSE)
g3_test <- modelEval(true_values=ifelse(test.preds$g_score==3,1,0), predicted_values=test.preds$g3, threshold=g3_youden$threshold, print.results=FALSE)
g0_test
g1_test
g2_test
g3_test
test_metrics <- data.frame(g0=g0_test, g1=g1_test)
test_metrics
test_metrics <- data.frame(g0=t(g0_test), g1=t(g1_test))
test_metrics
train_metrics <- data.frame(g0=t(g0_train), g1=t(g1_train), g2=t(g2_train), g3=t(g3_train))
test_metrics <- data.frame(g0=t(g0_test), g1=t(g1_test), g2=t(g2_test), g3=t(g3_test))
train_metrics
test_metrics
pROC::roc(ifelse(train.preds$g_score==0,1,0), train.preds$g0, quiet=TRUE)
ifelse(train.preds$g_score==0,1,0)
coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
roc
?pROC::roc
## get youden cutoffs
roc <- pROC::roc(ifelse(train.preds$g_score==0,1,0), train.preds$g0, quiet=TRUE, plot=TRUE)
?ccords
?coords
coords(roc, x="best", input="specificity")
coords(roc, x="best", input="threshold")
coords(roc, x="best", input="threshold")
gene_sel <- sig.genes[1:23]
gene_sel <- top.genes #lasso
train_sig <- mat[,colnames(mat) %in% gene_sel]
test_sig <-  test_norm[,colnames(test_norm) %in% gene_sel]
## correlation heatmap of weighted genes
correlationMatrix <- cor(train_sig, method="spearman")
findCorrelation(correlationMatrix, cutoff=0.7, names=TRUE)
corrplot::corrplot(correlationMatrix, method="square", is.corr=TRUE,
tl.col="black", tl.cex=0.7,
col=colorRampPalette(c("darkblue","white","firebrick"))(200))
gene_sel <- sig.genes[1:23]
train_sig <- mat[,colnames(mat) %in% gene_sel]
test_sig <-  test_norm[,colnames(test_norm) %in% gene_sel]
## correlation heatmap of weighted genes
correlationMatrix <- cor(train_sig, method="spearman")
findCorrelation(correlationMatrix, cutoff=0.7, names=TRUE)
corrplot::corrplot(correlationMatrix, method="square", is.corr=TRUE,
tl.col="black", tl.cex=0.7,
col=colorRampPalette(c("darkblue","white","firebrick"))(200))
table(train_preds$g_score)
table(train.preds$g_score)
table(ifelse(train.preds$g_score==0 | train.preds$g_score==1, 1, 0))
368+84
roc <- pROC::roc(ifelse(train.preds$g_score==0, 1, 0), train.preds$g0, quiet=TRUE, plot=TRUE)
g0_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
roc <- pROC::roc(ifelse(train.preds$g_score < 2, 1, 0), train.preds$g1, quiet=TRUE)
g1_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
roc <- pROC::roc(ifelse(train.preds$g_score < 3, 1, 0), train.preds$g2, quiet=TRUE)
g2_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
roc <- pROC::roc(ifelse(train.preds$g_score==3, 1, 0), train.preds$g3, quiet=TRUE)
g3_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
g3_youden
modelEval
roc <- pROC::roc(ifelse(train.preds$g_score==0, 1, 0), train.preds$g0, quiet=TRUE, plot=TRUE)
g0_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
roc <- pROC::roc(ifelse(train.preds$g_score < 2, 1, 0), train.preds$g1, quiet=TRUE)
g1_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
roc <- pROC::roc(ifelse(train.preds$g_score < 3, 1, 0), train.preds$g2, quiet=TRUE)
g2_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
roc <- pROC::roc(ifelse(train.preds$g_score==3, 1, 0), train.preds$g3, quiet=TRUE)
g3_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
g0_train <- modelEval(true_values=ifelse(train.preds$g_score==0,1,0), predicted_values=train.preds$g0, threshold=g0_youden$threshold, print.results=FALSE)
g1_train <- modelEval(true_values=ifelse(train.preds$g_score < 2,1,0), predicted_values=train.preds$g1, threshold=g1_youden$threshold, print.results=FALSE)
g2_train <- modelEval(true_values=ifelse(train.preds$g_score < 3,1,0), predicted_values=train.preds$g2, threshold=g2_youden$threshold, print.results=FALSE)
g3_train <- modelEval(true_values=ifelse(train.preds$g_score==3,1,0), predicted_values=train.preds$g3, threshold=g3_youden$threshold, print.results=FALSE)
train_metrics <- data.frame(g0=t(g0_train), g1=t(g1_train), g2=t(g2_train), g3=t(g3_train))
train_metrics
train.preds$g1
head(train.preds)
##---------
## 04: fit cumulative OR model on sig or lasso weighted genes
length(top.genes[top.genes %in% sig.genes[1:23]])
gene_sel <- top.genes #lasso
train_sig <- mat[,colnames(mat) %in% gene_sel]
test_sig <-  test_norm[,colnames(test_norm) %in% gene_sel]
## correlation heatmap of weighted genes
correlationMatrix <- cor(train_sig, method="spearman")
findCorrelation(correlationMatrix, cutoff=0.7, names=TRUE)
corrplot::corrplot(correlationMatrix, method="square", is.corr=TRUE,
tl.col="black", tl.cex=0.7,
col=colorRampPalette(c("darkblue","white","firebrick"))(200))
## Pre-processing transformation can be estimated from the training data and applied to any data set with the same variables
## use mean and standard deviation from training data to to process test data before prediction
## scale training and test data
preProcValues <- caret::preProcess(train_sig, method = c("center", "scale"))
train_sig_scale <- predict(preProcValues, train_sig)
test_sig_scale <- predict(preProcValues, test_sig)
# Fit ordinal cumulative link model on sig|weighted genes
train_sig_scale$class <- as.factor(ref.df$g_score[match(rownames(train_sig_scale), ref.df$ID)])
ord.fit <- ordinal::clm(formula=class ~ ., data=train_sig_scale, link="probit")
summary(ord.fit)$coefficients
##---------------------
## Evaluate model performance
##---------------------
options(scipen = 999)
## training data
train.preds <- data.frame(g=predict(ord.fit, newdata=train_sig_scale[,!colnames(train_sig_scale) %in% "class"], type="prob"))
train.preds <- round(train.preds*100, 2)
colnames(train.preds) <- gsub(".fit.", "", colnames(train.preds))
train.preds$ID <- rownames(train_sig_scale)
train.preds$pred_score <- predict(ord.fit, newdata=train_sig_scale[,!colnames(train_sig_scale) %in% "class"], type="class")$fit
train.preds$pred_score <- as.numeric(train.preds$pred_score)
train.preds$g_score <- train.df$g_score[match(train.preds$ID, train.df$ID)]
train.preds$g_score <- factor(train.preds$g_score, ordered=T)
roc <- pROC::roc(ifelse(train.preds$g_score==0, 1, 0), train.preds$g0, quiet=TRUE, plot=TRUE)
g0_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
roc <- pROC::roc(ifelse(train.preds$g_score < 2, 1, 0), train.preds$g1, quiet=TRUE)
g1_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
roc <- pROC::roc(ifelse(train.preds$g_score < 3, 1, 0), train.preds$g2, quiet=TRUE)
g2_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
roc <- pROC::roc(ifelse(train.preds$g_score==3, 1, 0), train.preds$g3, quiet=TRUE)
g3_youden <- coords(roc, x="best", input="threshold", best.method="youden", transpose=F)
g0_train <- modelEval(true_values=ifelse(train.preds$g_score==0,1,0), predicted_values=train.preds$g0, threshold=g0_youden$threshold, print.results=FALSE)
g1_train <- modelEval(true_values=ifelse(train.preds$g_score < 2,1,0), predicted_values=train.preds$g1, threshold=g1_youden$threshold, print.results=FALSE)
g2_train <- modelEval(true_values=ifelse(train.preds$g_score < 3,1,0), predicted_values=train.preds$g2, threshold=g2_youden$threshold, print.results=FALSE)
g3_train <- modelEval(true_values=ifelse(train.preds$g_score==3,1,0), predicted_values=train.preds$g3, threshold=g3_youden$threshold, print.results=FALSE)
train_metrics <- data.frame(g0=t(g0_train), g1=t(g1_train), g2=t(g2_train), g3=t(g3_train))
## test data
test.preds <- data.frame(g=predict(ord.fit, newdata=test_sig_scale[,colnames(test_sig_scale) %in% sig.genes], type="prob"))
test.preds <- round(test.preds*100, 2)
colnames(test.preds) <- gsub(".fit.", "", colnames(test.preds))
test.preds$ID <- rownames(test_sig_scale)
test.preds$pred_score <- predict(ord.fit, newdata=test_sig_scale[,!colnames(test_sig_scale) %in% "class"], type="class")$fit
test.preds$pred_score <- as.numeric(test.preds$pred_score)
test.preds$g_score <- test.df$g_score[match(test.preds$ID, test.df$ID)]
test.preds$g_score <- factor(test.preds$g_score, ordered=T)
g0_test <- modelEval(true_values=ifelse(test.preds$g_score==0,1,0), predicted_values=test.preds$g0, threshold=g0_youden$threshold, print.results=FALSE)
g1_test <- modelEval(true_values=ifelse(test.preds$g_score < 2,1,0), predicted_values=test.preds$g1, threshold=g1_youden$threshold, print.results=FALSE)
g2_test <- modelEval(true_values=ifelse(test.preds$g_score < 3,1,0), predicted_values=test.preds$g2, threshold=g2_youden$threshold, print.results=FALSE)
g3_test <- modelEval(true_values=ifelse(test.preds$g_score==3,1,0), predicted_values=test.preds$g3, threshold=g3_youden$threshold, print.results=FALSE)
test_metrics <- data.frame(g0=t(g0_test), g1=t(g1_test), g2=t(g2_test), g3=t(g3_test))
train_metrics
train.preds[train.preds$g_score>0,]
max.col()
## test data
test.preds <- data.frame(g=predict(ord.fit, newdata=test_sig_scale[,colnames(test_sig_scale) %in% sig.genes], type="prob"))
test.preds <- round(test.preds*100, 2)
test.preds$pred_score <- max.col(test.preds)
head(test.preds)
## test data
test.preds <- data.frame(g=predict(ord.fit, newdata=test_sig_scale[,colnames(test_sig_scale) %in% sig.genes], type="prob"))
test.preds <- round(test.preds*100, 2)
colnames(test.preds) <- gsub(".fit.", "", colnames(test.preds))
test.preds$pred_score <- max.col(test.preds) - 1
test.preds$ID <- rownames(test_sig_scale)
test.preds$g_score <- test.df$g_score[match(test.preds$ID, test.df$ID)]
test.preds$g_score <- factor(test.preds$g_score, ordered=T)
head(test.preds)
## test data
test.preds <- data.frame(g=predict(ord.fit, newdata=test_sig_scale[,colnames(test_sig_scale) %in% sig.genes], type="prob"))
test.preds <- round(test.preds*100, 2)
colnames(test.preds) <- gsub(".fit.", "", colnames(test.preds))
max.col(test.preds) - 1
test.preds$pred_score <- max.col(test.preds) - 1
head(test.preds)
## training data
train.preds <- data.frame(g=predict(ord.fit, newdata=train_sig_scale[,!colnames(train_sig_scale) %in% "class"], type="prob"))
train.preds <- round(train.preds*100, 2)
colnames(train.preds) <- gsub(".fit.", "", colnames(train.preds))
train.preds$pred_score <- max.col(train.preds) - 1
train.preds$ID <- rownames(train_sig_scale)
train.preds$g_score <- train.df$g_score[match(train.preds$ID, train.df$ID)]
train.preds$g_score <- factor(train.preds$g_score, ordered=T)
## test data
test.preds <- data.frame(g=predict(ord.fit, newdata=test_sig_scale[,colnames(test_sig_scale) %in% sig.genes], type="prob"))
test.preds <- round(test.preds*100, 2)
colnames(test.preds) <- gsub(".fit.", "", colnames(test.preds))
test.preds$pred_score <- max.col(test.preds) - 1
test.preds$ID <- rownames(test_sig_scale)
test.preds$g_score <- test.df$g_score[match(test.preds$ID, test.df$ID)]
test.preds$g_score <- factor(test.preds$g_score, ordered=T)
head(test.preds)
train.preds[train.preds$g_score>0,]
